#                   THE WEBLOGIC PROPERTIES FILE
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# This file, which conforms to the java.util.Properties file
# definition, configures your WebLogic products.  You cannot run
# WebLogic Server without setting required configuration properties in this
# file. Required properties are marked and appear first in the file.
#
# Details on each entry and important information about configuration
# and security are documented on our website. Please go to:
#
#   http://www.weblogic.com/docs51/admindocs/properties.html
#
# for full instructions on how to edit this file.
#
# You do not need to include properties in this file unless you want to
# change the default, embedded property. Some properties on the
# AdminProps page are not listed here because the default property
# is being used. You can change the default by adding the property and
# its value to this file.
#
# You cannot set weblogic.system.home in this file, since the WebLogic Server
# must know where home is in order to retrieve this file. You can
# change WebLogic home on the command line when you start the
# WebLogic Server.
#
# CLUSTER USERS: Note that the (shared) *per-cluster* properties file should
# contain most all of the properties in this file. The only properties
# that potentially belong in a per-server properties file for a server
# running in a cluster are the registration (startup class) of pinned
# RMI objects, and a few tuning properties that may be different for
# servers in the cluster, depending upon hardware and memory. If you use
# a per-server properties file, please REMOVE all properties except those
# that are specifically required in the per-server properties file. You
# can find specific notes on clusters by searching through this file for
# "CLUSTER USERS".
#
# -------------------------------------------------
# The way this file is organized:
#   Core properties (includes REQUIRED and RECOMMENDED)
#      Core system properties
#      Core security-related properties
#      Core security-related properties for SSL
#      Core HTTPD administrative properties
#
#   Optional properties
#      Administrator properties
#      System properties
#      System startup files
#      System shutdown files
#      Security-related properties for Workspaces
#      Jolt for WebLogic properties
#      WebLogic Enterprise Connectivity properties
#      WebLogic File properties
#      WebLogic JMS demo properties
#      WebLogic RMI demo properties
#      WebLogic EJB demo properties
#      WebLogic XML demo properties
#      WebLogic ZAC demo properties
#      HTTPD administrative properties
#      WebLogic JDBC driver properties
#      WebLogic JDBC connection pool management
#      WebLogic demo connection pool
#      WebLogic HTTP Servlet properties
#         Proxy servlet registration
#         Classpath servlet registration
#         File servlet registration
#         ServerSideInclude servlet registration
#         PageCompileServlet (used by JHTML)
#         JSPServlet (used by JSP)
#         ServletServlet registration
#         Servlet reload properties
#         Servlet ACLs
#      WebLogic JSP properties
#      WebLogic JHTML properties
#      WebLogic RMI over IIOP properties
#      User-written and demo servlet registrations
# -------------------------------------------------



#################################################################
# CORE PROPERTIES
# -------------------------------------------------
# You should set these before you start the WebLogic Server the first time.
# If you need more instructions on individual properties in this
# section, check the same section in the Optional Properties, where
# we've left the long explanations. Or, better yet, go to our
# website and read all about properties, at:
#    http://www.weblogic.com/docs51/admindocs/properties.html
#################################################################



# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# CORE SYSTEM PROPERTIES
# -------------------------------------------------
# TCP/IP port number at which the WebLogic Server listens for connections
weblogic.system.listenPort=7001



# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# CORE SECURITY-RELATED PROPERTIES
# -------------------------------------------------
# Read important information about security at:
#
#   http://www.weblogic.com/docs51/admindocs/properties.html
#
# REQUIRED: The system password MUST be set in order to start the
# WebLogic Server. This password is case-sensitive, at least 8 characters.
# The username for the privileged user is ALWAYS "system".
# This username and password also includes httpd access (see
# HTTPD properties below).
weblogic.password.system=beadownload
weblogic.password.techplanner=spider
weblogic.password.ordertracker=orderdemo

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# RECOMMEND Set to 'everyone' if HTTPD is enabled
weblogic.allow.execute.weblogic.servlet=everyone
# Set individual ACLs to restrict access to HTTP-related resources,
# such as the Administration servlets.
# To make your own servlets generally available, follow this 
# pattern (provide a weblogic.allow.execute) for your packages and
# set ACLs as appropriate.


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# CORE SECURITY-RELATED PROPERTIES FOR SSL
# ------------------------------------------------
# Read important information about SSL at:
#
#   http://www.weblogic.com/docs51/classdocs/API_secure.html
#
# Enable SSL 
# (default if property not defined is false)
weblogic.security.ssl.enable=true
#
# SSL listen port
weblogic.system.SSLListenPort=7002

# Servlets for SSL
# ------------------------------------------------
# Authentication servlet for creating tokens for applets
weblogic.httpd.register.authenticated=weblogic.t3.srvr.ClientAuthenticationServlet
# Limits number of unclaimed stored tokens
weblogic.security.certificateCacheSize=3
# Capture CA root of client servlet
weblogic.httpd.register.AdminCaptureRootCA=admin.AdminCaptureRootCA

# Certificates for SSL
# ------------------------------------------------
# Name of acceptable CA roots
# For client authentication change value to a valid .pem file
#weblogic.security.clientRootCA=SecureServerCA.pem
#
# Server certificates for SSL
# ------------------------------------------------
weblogic.security.certificate.server=democert.pem
weblogic.security.key.server=demokey.pem
weblogic.security.certificate.authority=ca.pem

# registration for certificate generator servlet
weblogic.httpd.register.Certificate=utils.certificate
weblogic.allow.execute.weblogic.servlet.Certificate=system


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# CORE HTTPD ADMINISTRATIVE PROPERTIES
# ------------------------------------------------
# True permits the HTTPD to run (default)
# Uncomment this property to disable HTTPD
#weblogic.httpd.enable=false
#
# If authentication is required, add username/password for each user
# who will be included in an ACL, as in this commented-out example:
#weblogic.password.peter=#8gjsL4*




#################################################################
# OPTIONAL PROPERTIES
# ------------------------------------------------
# These properties affect the behavior of the WebLogic Server.
# You only need to set these properties if you want
# to change the default setting, which is the property shown.




# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# ADMINISTRATOR PROPERTIES
# ------------------------------------------------
# Administrator properties are optional information properties,
# particularly useful for clusters.
#weblogic.administrator.location=3355 California Drive, West Hampshire, CA 94104
#weblogic.administrator.name=Joe Administrator
#weblogic.administrator.phone=1 415 555 1234




# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# SYSTEM PROPERTIES
# ------------------------------------------------
# System properties in this section are set to system defaults

# Performance pack.  The shared library must be accessible from your
# PATH (NT) or from your shared library path (UNIX; the name of the
# variable varies: LD_LIBRARY_PATH, SHLIB_PATH, etc.)
weblogic.system.nativeIO.enable=true

# Outputs logging information to the console as well as to the log file
weblogic.system.enableConsole=true

# Sets the directory or URL for the WebLogic Admin help pages
# The help pages are shipped in the "docs/adminhelp" directory, in the
# default document root in public_html
weblogic.system.helpPageURL=g:/weblogic/myserver/public_html/docs51/adminhelp/

# If you prefer to access the most recent help pages, you can do so online
# by commenting out the previous property and uncommenting this one:
#weblogic.system.helpPageURL=http://www.weblogic.com/docs51/adminhelp/

# Properties for tuning the server's performance
# ------------------------------------------------
# Number of WebLogic Server execute threads.
weblogic.system.executeThreadCount=15

# Other optional system properties
# ------------------------------------------------
# Limits size of weblogic.log (in K) and versions old log
weblogic.system.maxLogFileSize=1024

# Adjust minimum length of password
weblogic.system.minPasswordLen=8

# UNIX only: If running on port 80 on UNIX, enable the setUID program
#weblogic.system.enableSetUID=false

# UNIX only: Unprivileged user to setUID to after starting up
# WebLogic Server on port 80
#weblogic.system.nonPrivUser=nobody



# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# CLUSTER-SPECIFIC PROPERTIES
# ------------------------------------------------
# Cluster-specific properties in this section are set to system defaults.
# CLUSTER USERS: Note that ALL Cluster-specific properties should be set
# in the *per-cluster* properties file ONLY.
#
# Time-to-live (number of hops) for the cluster's multicast messages
# (default 1, range 1-255).
#weblogic.cluster.multicastTTL=1
#
# Sets the load-balancing algorithm to be used between
# replicated services if none is specified. If not specified,
# round-robin is used.
#weblogic.cluster.defaultLoadAlgorithm=round-robin



# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# SERVER-SPECIFIC CLUSTER PROPERTIES
# ------------------------------------------------
# Cluster-related properties in this section are set to system defaults.
# CLUSTER USERS: Note that these server-specific cluster-related properties
# should be set in the *per-server* properties file ONLY.
#
# Sets the weight of the individual server for the weight-based load-balancing.
# Range is 0 - 100.
# Larger numbers increase the amount of traffic routed to this server. 
#weblogic.system.weight=100



# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# SYSTEM STARTUP FILES - Examples
# ------------------------------------------------
# CLUSTER USERS: Note that ONLY startup registrations for pinned RMI
# objects should be registered in the *per-server* properties file.
# All other startup classes should be registered in the *per-cluster*
# properties file.
#
# For more info on writing and using startup file, see the
# Developers Guide "Writing a WebLogic Client application," at
#    http://www.weblogic.com/docs51/classdocs/API_t3.html
#
# Register a startup class by giving it a virtual name and
# supplying its full pathname.
#weblogic.system.startupClass.[virtual_name]=[full_pathname]
#
# Add arguments for the startup class
#weblogic.system.startupArgs.[virtual_name]={argname]=[argvalue]
#
# This example shows the entry for examples/t3client/StartupQuery.java
#weblogic.system.startupClass.doquery=examples.t3client.StartupQuery
#weblogic.system.startupArgs.doquery=\
#       query=select * from emp,\
#       db=jdbc:weblogic:pool:demoPool



# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# SYSTEM SHUTDOWN FILES - Examples
# ------------------------------------------------
# For more info on writing and using shutdown file, see the
# Developers Guide "Writing a WebLogic Client application," at
#    http://www.weblogic.com/docs51/classdocs/API_t3.html
#
# Register a shutdown class by giving it a virtual name and
# supplying its full pathname.
#weblogic.system.shutdownClass.[virtual_name]=[full_pathname]
#
# Add arguments for the shutdown class
#weblogic.system.shutdownArgs.[virtualName]={argname]=[argvalue]
#
# This example shows the entry for examples/t3client/ShutdownTest.java
#weblogic.system.shutdownClass.ShutdownTest=examples.t3client.ShutdownTest
#weblogic.system.shutdownArgs.ShutdownTest=\
#       outfile=c:/temp/shutdown.log




# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# SECURITY-RELATED PROPERTIES FOR WORKSPACES
# ------------------------------------------------
# For backward compatibility, the following entries disable Access
# Control on Workspaces
weblogic.allow.read.weblogic.workspace=everyone
weblogic.allow.write.weblogic.workspace=everyone




# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# JOLT FOR WEBLOGIC PROPERTIES
# ------------------------------------------------
# These properties configure a BEA Jolt connection pool for use with
# the simpapp and bankapp examples, and register a servlet for use with
# with the simpapp example. The default server address provided here
# points to a public TUXEDO server that is hosted by BEA for use with
# this example. 
#
# Servlet registration for simpapp example:
# ------------------------------------------------
#weblogic.httpd.register.simpapp=examples.jolt.servlet.simpapp.SimpAppServlet
#
# Pool creation and cleanup
# note this example is set up to work with the public
# demo TUXEDO server available from BEA's website:
# ------------------------------------------------
#weblogic.system.startupClass.demojoltpoolStart=\
#    bea.jolt.pool.servlet.weblogic.PoolManagerStartUp
#weblogic.system.startupArgs.demojoltpoolStart=\
#    poolname=demojoltpool,\
#    appaddrlist=//beademo1.beasys.com:8000,\
#    failoverlist=//beademo1.beasys.com:8000,\
#    minpoolsize=1,\
#    maxpoolsize=3
#
#weblogic.system.shutdownClass.demojoltpoolStop=\
#    bea.jolt.pool.servlet.weblogic.PoolManagerShutDown
#weblogic.system.shutdownArgs.demojoltpoolStop=\
#    poolname=demojoltpool





# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# WEBLOGIC ENTERPRISE CONNECTIVITY PROPERTIES
# ------------------------------------------------
# The registrations enable a BEA IIOP connection pool and
# register servlets for use with the simpapp and university examples.  
# Configure for your environment and uncomment to use.
# Uncommenting these properties requires WebLogic Enterprise Connectivity
# and an operating WebLogic Enterprise Server.
#
# Servlet registration for simpapp servlet example
# ------------------------------------------------
#weblogic.httpd.register.SimpappServlet=\
#       examples.wlec.servlets.simpapp.SimpappServlet
#
#weblogic.allow.execute.weblogic.servlet.SimpappServlet=everyone
#
# Servlet registration for simpapp EJB example
# (You'll need to add the wlec_ejb_simpapp.jar to the
# weblogic.ejb.deploy property in this file.)
# --------------------------------------------
#weblogic.httpd.register.ejbSimpappServlet=\
#       examples.wlec.ejb.simpapp.ejbSimpappServlet
#weblogic.allow.execute.weblogic.servlet.ejbSimpappServlet=everyone
#
# Pool creation and cleanup for the simpapp example
# -------------------------------------------------
#weblogic.CORBA.connectionPool.simplepool=\
#       appaddrlist=//wlehost:2468,\
#       failoverlist=//wlehost:2468,\
#       minpoolsize=2,\
#       maxpoolsize=3,\
#       username=wleuser,\
#       userrole=developer,\
#       domainname=simpapp
#
# Servlet registration for university Servlet example:
# ---------------------------------------------------
#weblogic.httpd.register.UniversityServlet=\
#       examples.wlec.servlets.university.UniversityServlet
#weblogic.allow.execute.weblogic.servlet.UniversityServlet=everyone
#
# Pool creation and cleanup for the University example:
# ----------------------------------------------------
#weblogic.CORBA.connectionPool.Univpool=\
#       appaddrlist=//wlehost:2498,\
#       failoverlist=//wlehost:2498,\
#       minpoolsize=2,\
#       maxpoolsize=3,\
#       username=wleuser,\
#       userrole=developer,\
#       apppassword=wlepassword,\
#       domainname=university




# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# WEBLOGIC FILE PROPERTIES
# ------------------------------------------------
# Maps a volume name to a path, for client file read/write
#weblogic.io.fileSystem.[volumeName]=[fullPathName]




# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
# WEBLOGIC JMS DEMO PROPERTIES
# -------------------------------------------------
# CLUSTER USERS: Note that ALL JMS deployment should be done in the
# *per-cluster* properties file ONLY.
#
# You set up a JDBC connection pool if you want persistent messages
# (including durable subscriptions). To use JMS and EJBs in the same
# transaction, both must use the same JDBC connection pool. Uncomment
# the following property to use the default JDBC connection pool
# 'demo', which is defined in the Demo connection pool section of this file.  
#
#weblogic.jms.connectionPool=demoPool
#
# The JMS Webshare example demonstrates how the ClientID for a
# durable subscriber is configured in the connection factory:
#
#weblogic.jms.topic.webshareTopic=jms.topic.webshareTopic
#weblogic.jms.connectionFactoryName.webshare=jms.connection.webshareFactory
#weblogic.jms.connectionFactoryArgs.webshare=ClientID=webshareUser
#weblogic.httpd.register.webshare=examples.jms.webshare.WebshareServlet
#
# The JMS trader example shows how to use JMS with an EJB. In addition 
# to uncommenting the following properties, you must also set up and 
# deploy the EJB example examples.ejb.basic.statelessSession.Trader in
# ejb_basic_statelessSession.jar to try out this JMS example: 
#
#weblogic.jms.topic.exampleTopic=javax.jms.exampleTopic
#weblogic.jms.connectionFactoryName.trader=jms.connection.traderFactory
#weblogic.jms.connectionFactoryArgs.trader=ClientID=traderReceive
#weblogic.httpd.register.jmstrader=examples.jms.trader.TraderServlet
#
# Registers the underlying servlet
#weblogic.httpd.register.jmssender=examples.jms.sender.SenderServlet
#
# These properties are used with the ServerReceive JMS example,
# which demonstrates how to establish a JMS message consumer 
# in a startup class:
#
#weblogic.system.startupClass.serverReceive=\
#  examples.jms.startup.ServerReceive
#weblogic.system.startupArgs.serverReceive=\
#  connectionFactory=javax.jms.TopicConnectionFactory,\
#  topic=javax.jms.exampleTopic
#
# These properties are used with the PoolReceive JMS example,
# which demonstrates how to establish a pool of JMS message consumers
# in a startup class:
#weblogic.system.startupClass.poolReceive=\
#  examples.jms.startup.PoolReceive
#weblogic.system.startupArgs.poolReceive=\
#  connectionFactory=javax.jms.TopicConnectionFactory,\
#  topic=javax.jms.exampleTopic
#weblogic.allow.create.weblogic.jms.ServerSessionPool=everyone


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# WEBLOGIC RMI DEMO PROPERTIES
# ------------------------------------------------
# CLUSTER USERS: Note that pinned RMI objects should be registered
# in the *per-server* properties file ONLY. All other RMI startup
# classes should be registered in the *per-cluster* properties file.
#
# Remote classes registered at startup after the pattern:
#weblogic.system.startupClass.[virtualName]=[fullPackageName]
#
# These examples can be compiled to see RMI in action. Uncomment to use:
#weblogic.system.startupClass.hello=examples.rmi.hello.HelloImpl
#weblogic.system.startupClass.multihello=examples.rmi.multihello.HelloImpl
#weblogic.system.startupClass.stock=examples.rmi.stock.StockServer




# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
# WEBLOGIC EJB DEMO PROPERTIES
# -------------------------------------------------
# CLUSTER USERS: Note that ALL EJB deployment should be done in the
# *per-cluster* properties file ONLY.
#
# See WebLogic Demo Connection Pool below for a connection pool
# to use with these examples.
#
# Deploys EJBeans. Uncomment the appropriate lines below and 
# modify DBMS-related info and paths to match your particular installation:
	
 weblogic.ejb.deploy=\
         d:/Dpi/Code/Spider.jar

#weblogic.ejb.deploy=\
#       g:/weblogic/myserver/ejb_basic_beanManaged.jar, \
#       g:/weblogic/myserver/ejb_basic_containerManaged.jar, \
#       g:/weblogic/myserver/ejb_basic_statefulSession.jar, \
#       g:/weblogic/myserver/ejb_basic_statelessSession.jar, \
#       g:/weblogic/myserver/ejb_extensions_finderEnumeration.jar, \
#       g:/weblogic/myserver/ejb_extensions_readMostly.jar, \
#       g:/weblogic/myserver/ejb_subclass.jar, \
#       g:/weblogic/myserver/jolt_ejb_bankapp.jar
#
# Servlet used by the EJB basic beanManaged example
# Uncomment to use:
#weblogic.httpd.register.beanManaged=\
#        examples.ejb.basic.beanManaged.Servlet
#
# Add a list of users (set the password with weblogic.password.[username]=XXX)
# to set an ACL for this servlet:
#weblogic.allow.execute.weblogic.servlet.beanManaged=user1,user2,etc
#weblogic.password.user1=user1Password
#weblogic.password.user2=user2Password





# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# WEBLOGIC XML DEMO PROPERTIES
# ------------------------------------------------
# These properties are required to run the XML examples.
# Uncomment to use.
#
# CLUSTER USERS: Note that ALL servlets should be set up
# in the *per-cluster* properties file ONLY.
#
#weblogic.httpd.register.StockServlet=examples.xml.http.StockServlet
#
# BizTalk example properties
#weblogic.jms.queue.tradeIncoming=biztalk.jms.tradeIncoming
#weblogic.jms.queue.tradeError=biztalk.jms.tradeError
#
#weblogic.httpd.register.BizTalkServer=examples.xml.biztalk.BizHttpProtocolAdapter
#weblogic.httpd.initArgs.BizTalkServer=bizQueue=biztalk.jms.tradeIncoming




# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
# WEBLOGIC ZAC DEMO PROPERTIES
# -------------------------------------------------
# These registrations enable the ZAC Publish Wizard. 
#
weblogic.zac.enable=true
#
# Set the publish root for a WebLogic Server. Edit and
# uncomment to use.
#
#weblogic.zac.publishRoot=g:/weblogic/zac
#
# Set an ACL for each package you publish. The [name] is
# the "Package name" you assign in the ZAC Publish Wizard.
# Publish a package, edit this property, and uncomment to use.
#weblogic.allow.read.weblogic.zac.[name]=[user list]
#weblogic.allow.write.weblogic.zac.[name]=system





# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# HTTPD ADMINISTRATIVE PROPERTIES
# ------------------------------------------------
# Enables logging of HTTPD info in common log format and
# sets the log file name (default is "access.log" in "myserver")
weblogic.httpd.enableLogFile=true
weblogic.httpd.logFileName=access.log

# Tracks HTTPD requests with events delivered to WEBLOGIC.LOG.HTTPD
weblogic.httpd.enableEvents=false

# Enables HTTP sessions
weblogic.httpd.session.enable=true

# Sets an optional cookie name. The default name is "WebLogicSession". 
# Prior to version 4.0, the default was "TengahSession". To make
# this backward compatible with cookies generated from previous
# installations, you should set this property to "TengahSession".
# Uncomment this line and set this to any string of your choice, 
# or comment out this property to use the default.
#weblogic.httpd.session.cookie.name=WebLogicSession

# MIME types
weblogic.httpd.mimeType.text/html=html,htm
weblogic.httpd.mimeType.image/gif=gif
weblogic.httpd.mimeType.image/jpeg=jpeg,jpg
weblogic.httpd.mimeType.application/pdf=pdf
weblogic.httpd.mimeType.application/zip=zip
weblogic.httpd.mimeType.application/x-java-vm=class
weblogic.httpd.mimeType.application/x-java-archive=jar
weblogic.httpd.mimeType.application/x-java-serialized-object=ser
weblogic.httpd.mimeType.application/octet-stream=exe
weblogic.httpd.mimeType.text/vnd.wap.wml=wml
weblogic.httpd.mimeType.text/vnd.wap.wmlscript=wmls
weblogic.httpd.mimeType.application/vnd.wap.wmlc=wmlc
weblogic.httpd.mimeType.application/vnd.wap.wmlscriptc=wmlsc
weblogic.httpd.mimeType.image/vnd.wap.wbmp=wbmp

# In seconds, the keep-alive for HTTP and HTTPS requests
weblogic.httpd.http.keepAliveSecs=60
weblogic.httpd.https.keepAliveSecs=120



# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# WEBLOGIC JDBC DRIVER PROPERTIES
# ------------------------------------------------
# Enables JDBC driver logging and sets the file name for the log
# The weblogic.jdbc.logFile is placed in the per-server
# directory (default is "myserver")
weblogic.jdbc.enableLogFile=false
weblogic.jdbc.logFileName=jdbc.log



# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# WEBLOGIC JDBC CONNECTION POOL MANAGEMENT
# ------------------------------------------------
# CLUSTER USERS: Note that ALL JDBC connection pools should be set up
# in the *per-cluster* properties file ONLY.
#
# For creating JDBC connection pools. This example shows a connection
# pool called "oraclePool" that allows 3 T3Users "guest," "joe," and "jill"
# to use 4 JDBC connections (with a potential for up to 10 connections,
# incremented by two at a time, with a delay of 1 second between each
# attempt to connect to the database), to an Oracle database server called
# "DEMO." If more than 4 connections are opened, after 15 minutes, unused
# connections are dropped from the pool until only 4 connections remain open.
# Every 10 minutes, any unused connections in the pool are tested and 
# refreshed if they are not viable.
#
#weblogic.jdbc.connectionPool.oraclePool=\
#       url=jdbc:weblogic:oracle,\
#       driver=weblogic.jdbc.oci.Driver,\
#       loginDelaySecs=1,\
#       initialCapacity=4,\
#       maxCapacity=10,\
#       capacityIncrement=2,\
#       allowShrinking=true,\
#       shrinkPeriodMins=15,\
#       refreshMinutes=10,\
#       testTable=dual,\
#       props=user=SCOTT;password=tiger;server=DEMO
#
# Get more details on each argument for this property in the
# Administrators Guide on setting properties at:
#   http://www.weblogic.com/docs51/admindocs/properties.html
#
# Set up ACLs for this connection pool with the following:
#weblogic.allow.reserve.weblogic.jdbc.connectionPool.oraclePool=\
#       guest,joe,jill
#weblogic.allow.reset.weblogic.jdbc.connectionPool.oraclePool=\
#       joe,jill
#weblogic.allow.shrink.weblogic.jdbc.connectionPool.oraclePool=\
#       joe,jill
#
# This property is an ACL that specifies the users who can 
# create dynamic connection pools:
#weblogic.jdbc.connectionPoolcreate.admin=joe,jill
#
# Read more about setting up and using connection pools in the
# developers guide for WebLogic JDBC at:
#   http://www.weblogic.com/docs51/classdocs/API_jdbct3.html#T5a

	weblogic.jdbc.connectionPool.ejbPool=\
       url=jdbc:weblogic:oracle,\
       driver=weblogic.jdbc.oci.Driver,\
       loginDelaySecs=1,\
       initialCapacity=4,\
       maxCapacity=10,\
       capacityIncrement=2,\
       allowShrinking=true,\
       shrinkPeriodMins=15,\
       refreshMinutes=10,\
       testTable=dual,\
       props=user=techplanner;password=spider;server=spider
#       props=user=ordertracker;password=orderdemo;server=sitech

# Get more details on each argument for this property in the
# Administrators Guide on setting properties at:
#   http://www.weblogic.com/docs45/admindocs/properties.html
#
# Set up ACLs for this connection pool with the following:

weblogic.allow.reserve.weblogic.jdbc.connectionPool.ejbPool=everyone
weblogic.allow.reset.weblogic.jdbc.connectionPool.ejbPool=everyone
weblogic.allow.shrink.weblogic.jdbc.connectionPool.ejbPool=everyone


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
# WEBLOGIC DEMO CONNECTION POOL PROPERTIES
# -------------------------------------------------
# CLUSTER USERS: Note that ALL JDBC connection pools should be set up
# in the *per-cluster* properties file ONLY.
#
# This connection pool uses the sample Cloudscape database shipped
# with WebLogic. Used by the EJBean, JHTML, JSP and JMS examples.
# Uncomment to use:
#weblogic.jdbc.connectionPool.demoPool=\
#       url=jdbc:cloudscape:demo,\
#       driver=COM.cloudscape.core.JDBCDriver,\
#       initialCapacity=1,\
#       maxCapacity=2,\
#       capacityIncrement=1,\
#       props=user=none;password=none;server=none
#
# Add a TXDataSource for the connection pool:
#weblogic.jdbc.TXDataSource.weblogic.jdbc.jts.demoPool=demoPool
#
# Add an ACL for the connection pool:
#weblogic.allow.reserve.weblogic.jdbc.connectionPool.demoPool=everyone




# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# WEBLOGIC HTTP SERVLET PROPERTIES
# ------------------------------------------------
# CLUSTER USERS: Note that ALL servlets should be set up
# in the *per-cluster* properties file ONLY.
#
# WebLogic offers different types of servlets for various uses.
#
# Classpath servlet registration
# ------------------------------------------------
# The ClasspathServlet is used to serve classes from
# the system CLASSPATH. It is used by applets to load
# classes they depend upon, and is registered against 
# the virtual name 'classes' here by default. This means
# you should set your applet codebase to "/classes".
# You can register multiple virtual names for this servlet.
# Note that it can also be used to serve other 
# resources/files from the system CLASSPATH. 
# Don't confuse the ClasspathServlet with the ServletServlet. The
# ClasspathServlet is used for serving classes for client-side Java only.
# The ServletServlet is used to invoke unregistered servlets.
# See the Administrators Guide "Setting up WebLogic as an HTTP server"
# http://www.weblogic.com/docs51/admindocs/http.html#classfile for more info.
weblogic.httpd.register.classes=weblogic.servlet.ClasspathServlet
#
# We also set an open ACL for everyone to call the ClasspathServlet
# so that applets work without requiring further changes.
weblogic.allow.execute.weblogic.servlet.classes=everyone
#
# File servlet registration
# ------------------------------------------------
# FileServlet searches below the documentRoot for the requested file
# and serves it if found. If the requested file is a directory,
# FileServlet will append the defaultFilename to the requested path
# and serve that file if found.
weblogic.httpd.register.file=weblogic.servlet.FileServlet
weblogic.httpd.initArgs.file=defaultFilename=index.html
#
# ServerSideInclude servlet registration
# ------------------------------------------------
# SSIServlet searches below the documentRoot for the
# requested .shtml file and serves it if found.
weblogic.httpd.register.*.shtml=weblogic.servlet.ServerSideIncludeServlet
# Example URL: http://localhost:7001/portside/welcome.shtml
# for the file /weblogic/myserver/public_html/portside/welcome.shtml
#
# PageCompileServlet (used by JHTML)
# ------------------------------------------------
# See the information below under WebLogic JHTML
#
# JSPServlet (used by JSP)
# ------------------------------------------------
# See the information below under WebLogic JSP
#
# ServletServlet registration
# ------------------------------------------------
# Allows unregistered servlets in the servlet classpath (see Servlet
# reload properties below) to be requested by class name, including
# full package name. An instance of the best matching servlet class
# is created, initialized, and executed with the remainder of the
# URI being passed in as PATH_INFO.  Requires servlet classpath set.
# This servlet registration is shipped commented out because it
# may pose a security risk if improperly used. Please see the
# Administrators Guide "Setting up WebLogic as an HTTP server"
# at http://www.weblogic.com/docs51/admindocs/http.html for more info.
#
#weblogic.httpd.register.servlets=weblogic.servlet.ServletServlet
#
# Example URL: http://localhost:7001/servlets/myservletclasses/foo/baz
# for the file /myservlets/myservletclasses/foo/baz.class
#
# Proxy servlet registration
# ------------------------------------------------
# HttpProxyServlet takes an HTTP request, redirects it to another HTTP
# server, and sends the response to the requesting browser
weblogic.httpd.register.proxy=weblogic.t3.srvr.HttpProxyServlet
#
# RedirectURL initArg specifies the prefix to be applied to the
# proxied HTTP request
weblogic.httpd.initArgs.proxy=redirectURL=http://www.bigbox.com
#
# To set the server to proxy all unanswerable requests, set
# the weblogic.httpd.defaultServlet to this alias ("proxy")
# and comment out the defaultServlet registration below
#
# DocumentRoot configuration
# ------------------------------------------------
# The documentRoot is by default set to this directory; change
# as desired. FileServlet, SSIServlet, PageCompileServlet
# and JSPServlet use it.
weblogic.httpd.documentRoot=public_html/
#
# Default servlet registration
# ------------------------------------------------
# Virtual name of the default servlet if no matching servlet is found
weblogic.httpd.defaultServlet=file
#
# Servlet reload properties
# ------------------------------------------------
# Put servlets and classes they depend on below this directory to take
# advantage of dynamic reloading. (WebLogic classes don't belong
# here, and NO directories can be both in your system/environment
# CLASSPATH and in the servlet classpath.) WebLogic checks for modified
# servlets every reloadCheckSecs and reloads servlets and classes they
# depend on as needed. If reloadCheckSecs is set to -1, classes will
# never be reloaded.
weblogic.httpd.servlet.classpath=g:/weblogic/myserver/servletclasses
weblogic.httpd.servlet.reloadCheckSecs=1
#
# Servlet Access Control Lists (ACLs)
# ------------------------------------------------
# Setting up an access control list for each servlet limits access to
# a servlet to one or more users. This property is illustrated for the
# imaginary users 'peter', 'paul', and 'mary' with the first
# registered servlet below with a commented-out example. Note that
# each user in an ACL must have a password set in this file with
# the weblogic.password.[username]=XXX property.
#
# Example of a servlet registration
#weblogic.httpd.register.myservlet=examples.servlets.MyServlet
#
# Example of restricting user access with an ACL
#weblogic.allow.execute.weblogic.servlet.myservlet=peter,paul,mary
#
# Example of servlet startup registration
#weblogic.system.startupClass.servletTest=weblogic.servlet.utils.ServletStartup
#weblogic.system.startupArgs.servletTest=servlet=myservlet




# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# WEBLOGIC JHTML PROPERTIES
# ------------------------------------------------
# Sets up automatic page compilation for JHTML. Adjust init args for
# directory locations and uncomment to use.
#weblogic.httpd.register.*.jhtml=\
#       weblogic.servlet.jhtmlc.PageCompileServlet
#weblogic.httpd.initArgs.*.jhtml=\
#       pageCheckSeconds=1,\
#       packagePrefix=examples.jhtml,\
#       compileCommand=c:/java/bin/javac.exe,\
#       workingDir=g:/weblogic/myserver/classfiles,\
#       verbose=true




# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# WEBLOGIC JSP PROPERTIES
# ------------------------------------------------
# Sets up automatic page compilation for JSP. Adjust init args for
# directory locations and uncomment to use.
#weblogic.httpd.register.*.jsp=\
#       weblogic.servlet.JSPServlet
#weblogic.httpd.initArgs.*.jsp=\
#       pageCheckSeconds=1,\
#       compileCommand=c:/java/bin/javac.exe,\
#       workingDir=g:/weblogic/myserver/classfiles,\
#       verbose=true




# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# WEBLOGIC RMI OVER IIOP PROPERTIES
# ------------------------------------------------
# This property is required to run the RMI over IIOP examples.
# Uncomment to use.
#
#weblogic.system.startupClass.hello=examples.rmi_iiop.hello.HelloImpl




# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# USER-WRITTEN AND DEMO SERVLET REGISTRATIONS
# --------------------------------------------------------
# Set ACLs for these as desired
# --------------------------------------------------------
weblogic.httpd.register.phone=examples.servlets.PhoneServlet
# Set initArgs phonelist value to the fully-qualified
# file specification of the phonelist file
weblogic.httpd.initArgs.phone=\
        phonelist=g:/weblogic/examples/servlets/phonelist
weblogic.httpd.register.snoop=examples.servlets.SnoopServlet
weblogic.httpd.register.cookies=examples.servlets.CookieCounter
weblogic.httpd.register.error=examples.servlets.ErrorServlet
weblogic.httpd.register.applet=examples.servlets.AppletServlet
weblogic.httpd.register.helloWorld=examples.servlets.HelloWorldServlet
weblogic.httpd.register.helloKona=examples.servlets.HelloKonaServlet
weblogic.httpd.register.page=examples.servlets.PageEvent
weblogic.httpd.initArgs.page=\
        imageurl=g:/weblogic/examples/images/trans.gif
weblogic.httpd.register.session=examples.servlets.SessionServlet
weblogic.httpd.register.simple=examples.servlets.SimpleServlet
weblogic.httpd.register.simpleFormServlet=examples.servlets.SimpleFormServlet
weblogic.httpd.register.survey=examples.servlets.SurveyServlet
weblogic.httpd.initArgs.survey=\
        resultsDir=g:/weblogic/myserver

###################################################################
# Registration of Spider Servlets.  The InitArgs of SpiderLogin
# are as follows:
#
#	WebServer  = the URL of the WebServer
#	ServletURL = suffix to WebServer URL to get at servlets
#	FileURL    = suffix to WebServer URL to get at files
#
###################################################################

weblogic.httpd.register.SpiderLogin=com.Dpi.Spider.Presentation.SpiderLogin
weblogic.httpd.initArgs.SpiderLogin=\
	WebServer=http://mendocino.corp.foliage.com:7001/,ServletURL=,FileURL=file/Spider/
weblogic.httpd.register.InitialToolSelection=com.Dpi.Spider.Presentation.InitialToolSelection
weblogic.httpd.initArgs.InitialToolSelection=\
	WebServer=http://mendocino.corp.foliage.com:7001/,ServletURL=,FileURL=file/Spider/

weblogic.httpd.register.YieldEstimates=com.Dpi.Spider.Presentation.YieldEstimates
weblogic.httpd.initArgs.YieldEstimates=\
	WebServer=http://mendocino.corp.foliage.com:7001/,ServletURL=,FileURL=file/Spider/

# Administration servlet registrations
# ------------------------------------------------
# For managing your WebLogic Server with a web browser.
# Do not modify these registrations.
weblogic.httpd.register.AdminEvents=admin.AdminEvents
weblogic.httpd.register.AdminClients=admin.AdminClients
weblogic.httpd.register.AdminConnections=admin.AdminConnections
weblogic.httpd.register.AdminJDBC=admin.AdminJDBC
weblogic.httpd.register.AdminLicense=admin.AdminLicense
weblogic.httpd.register.AdminMain=admin.AdminMain
weblogic.httpd.register.AdminProps=admin.AdminProps
weblogic.httpd.register.AdminRealm=admin.AdminRealm
weblogic.httpd.register.AdminThreads=admin.AdminThreads
weblogic.httpd.register.AdminVersion=admin.AdminVersion
#
# Modify these ACLs for these servlets to
# control access to the administration servlets.
weblogic.allow.execute.weblogic.servlet.AdminEvents=system
weblogic.allow.execute.weblogic.servlet.AdminClients=system
weblogic.allow.execute.weblogic.servlet.AdminConnections=system
weblogic.allow.execute.weblogic.servlet.AdminJDBC=system
weblogic.allow.execute.weblogic.servlet.AdminLicense=system
weblogic.allow.execute.weblogic.servlet.AdminMain=system
weblogic.allow.execute.weblogic.servlet.AdminProps=system
weblogic.allow.execute.weblogic.servlet.AdminRealm=system
weblogic.allow.execute.weblogic.servlet.AdminThreads=system
weblogic.allow.execute.weblogic.servlet.AdminVersion=system
#
# This registration and ACL is provided for backward
# compatability. Use AdminMain instead.
weblogic.httpd.register.T3AdminMain=admin.AdminMain
weblogic.allow.execute.weblogic.servlet.T3AdminMain=system

# For Console help. Do not modify.
weblogic.httpd.register.ConsoleHelp=weblogic.servlet.FileServlet
weblogic.httpd.initArgs.ConsoleHelp=\
       defaultFilename=/weblogic/admin/help/NoContent.html
weblogic.allow.execute.weblogic.servlet.ConsoleHelp=everyone

# For setting the location of the Cloudscape database evaluation version.
java.system.property.cloudscape.system.home=g:/weblogic/eval/cloudscape/data


