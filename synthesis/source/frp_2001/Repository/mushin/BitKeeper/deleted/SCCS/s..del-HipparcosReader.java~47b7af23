H15878
s 00000/00000/00779
d D 1.5 01/08/29 07:31:18 jmochel 6 5
c Delete: src/mushin/frp/astronomy/catalog_readers/HipparcosReader.java
cC
cK61014
cPBitKeeper/deleted/.del-HipparcosReader.java~47b7af23
e
s 00198/00315/00581
d D 1.4 01/07/18 14:35:37 jmochel 5 4
c Models added
c Reader now uses table based reading of the file.
cC
cK15231
e
s 00292/00219/00604
d D 1.3 01/07/17 09:07:23 jmochel 4 3
c Checked in Together models
c Cartesian Coordinate Calculations added and appear to work.
cC
cK30069
e
s 00753/00015/00070
d D 1.2 01/07/16 15:56:44 jmochel 3 2
c Added in libraries.
c Made many interfaces into classes.
c File now reads correctly.
cC
cK26557
e
s 00085/00000/00000
d D 1.1 01/07/13 18:14:22 jmochel 2 1
cC
cF1
cK35887
cO-rw-rw-rw-
e
s 00000/00000/00000
d D 1.0 01/07/13 18:14:22 jmochel 1 0
c BitKeeper file f:/Repository/mushin/src/mushin/frp/astronomy/catalog_readers/HipparcosReader.java
cBjmochel@devilmountain.corp.foliage.com|ChangeSet|20010713220415|54911|c62b2c90
cHdevilmountain.corp.foliage.com
cK30442
cPsrc/mushin/frp/astronomy/catalog_readers/HipparcosReader.java
cR47b7af23
cV4
cX0xb1
cZ-04:00
e
u
U
f e 0
f x 0xb1
t
T
I 2
/* Generated by Together */

package mushin.frp.astronomy.catalog_readers;

import java.io.FileInputStream;
D 4
import java.io.FileOutputStream;
E 4
I 4
import java.io.FileWriter;
E 4
import java.io.FileNotFoundException;
import java.io.IOException;

I 4
import java.util.StringTokenizer;
I 5
import java.util.Hashtable;
E 5

E 4
import mushin.util.commandline.Parser;
import mushin.util.commandline.IOFilterParser;
import mushin.util.commandline.LexerCreationException;
import mushin.util.commandline.ParsingException;

public class HipparcosReader
{
D 3
	static int RECORDSIZE = 449;
E 3
I 3
	static int RECORDSIZE = 451;
E 3

D 3
	static int OFFSET_TOCATALOG = 0;
	static int LENGTH_OFCATALOG = 1;

   	static int OFFSET_TOHIP = 1;
	static int LENGTH_OFHIP = 6;
E 3
I 3
D 5
    static int OFFSET_TO_CATALOG    = 0;
    static int LENGTH_OF_CATALOG    =   1;
    static int OFFSET_TO_HIP        = 8;
    static int LENGTH_OF_HIP        = 6;
    static int OFFSET_TO_PROXY      =  15;
    static int LENGTH_OF_PROXY      =   1;
    static int OFFSET_TO_RAHMS      =  17;
D 4
    static int LENGTH_OF_RAHMS      =   1;
E 4
I 4
    static int LENGTH_OF_RAHMS      =  11;
E 4
    static int OFFSET_TO_DEDMS      =  29;
    static int LENGTH_OF_DEDMS      =   11;
    static int OFFSET_TO_VMAG       =  41;
    static int LENGTH_OF_VMAG       =   5;
    static int OFFSET_TO_VARFLAG    =  47;
    static int LENGTH_OF_VARFLAG    =   1;
    static int OFFSET_TO_R_VMAG     =  49;
    static int LENGTH_OF_R_VMAG     =   1;
    static int OFFSET_TO_RADEG      =  51;
    static int LENGTH_OF_RADEG      =   12;
    static int OFFSET_TO_DEDEG      =  64;
    static int LENGTH_OF_DEDEG      =   12;
    static int OFFSET_TO_ASTROREF   =  77;
    static int LENGTH_OF_ASTROREF   =   1;
    static int OFFSET_TO_PLX        =  79;
    static int LENGTH_OF_PLX        =   7;
    static int OFFSET_TO_PMRA       =  87;
    static int LENGTH_OF_PMRA       =   8;
    static int OFFSET_TO_PMDE       =  96;
    static int LENGTH_OF_PMDE       =   8;
    static int OFFSET_TO_E_RADEG    = 105;
    static int LENGTH_OF_E_RADEG    =   6;
    static int OFFSET_TO_E_DEDEG    = 112;
    static int LENGTH_OF_E_DEDEG    =   6;
    static int OFFSET_TO_E_PLX      = 119;
    static int LENGTH_OF_E_PLX      =   6;
    static int OFFSET_TO_E_PMRA     = 126;
    static int LENGTH_OF_E_PMRA     =   6;
    static int OFFSET_TO_E_PMDE     = 133;
    static int LENGTH_OF_E_PMDE     =   6;
    static int OFFSET_TO_DE_RA      = 140;
    static int LENGTH_OF_DE_RA      =   5;
    static int OFFSET_TO_PLX_RA     = 146;
    static int LENGTH_OF_PLX_RA     =   5;
    static int OFFSET_TO_PLX_DE     = 152;
    static int LENGTH_OF_PLX_DE     =   5;
    static int OFFSET_TO_PMRA_RA    = 158;
    static int LENGTH_OF_PMRA_RA    =   5;
    static int OFFSET_TO_PMRA_DE    = 164;
    static int LENGTH_OF_PMRA_DE    =   5;
    static int OFFSET_TO_PMRA_PLX   = 170;
    static int LENGTH_OF_PMRA_PLX   =   5;
    static int OFFSET_TO_PMDE_RA    = 176;
    static int LENGTH_OF_PMDE_RA    =   5;
    static int OFFSET_TO_PMDE_DE    = 182;
    static int LENGTH_OF_PMDE_DE    =   5;
    static int OFFSET_TO_PMDE_PLX   = 188;
    static int LENGTH_OF_PMDE_PLX   =   5;
    static int OFFSET_TO_PMDE_PMRA  = 194;
    static int LENGTH_OF_PMDE_PMRA  =   5;
    static int OFFSET_TO_F1         = 200;
    static int LENGTH_OF_F1         =   3;
    static int OFFSET_TO_F2         = 204;
    static int LENGTH_OF_F2         =   5;
    static int OFFSET_TO_BTMAG      = 217;
    static int LENGTH_OF_BTMAG      =   6;
    static int OFFSET_TO_E_BTMAG    = 224;
    static int LENGTH_OF_E_BTMAG    =   5;
    static int OFFSET_TO_VTMAG      = 230;
    static int LENGTH_OF_VTMAG      =   6;
    static int OFFSET_TO_E_VTMAG    = 237;
    static int LENGTH_OF_E_VTMAG    =   5;
    static int OFFSET_TO_M_BTMAG    = 243;
    static int LENGTH_OF_M_BTMAG    =   1;
    static int OFFSET_TO_B_V        = 245;
    static int LENGTH_OF_B_V        =   6;
    static int OFFSET_TO_E_B_V      = 252;
    static int LENGTH_OF_E_B_V      =   5;
    static int OFFSET_TO_R_B_V      = 258;
    static int LENGTH_OF_R_B_V      =   1;
    static int OFFSET_TO_V_I        = 260;
    static int LENGTH_OF_V_I        =   4;
    static int OFFSET_TO_E_V_I      = 265;
    static int LENGTH_OF_E_V_I      =   4;
    static int OFFSET_TO_R_V_I      = 270;
    static int LENGTH_OF_R_V_I      =   1;
    static int OFFSET_TO_COMBMAG    = 272;
    static int LENGTH_OF_COMBMAG    =   1;
    static int OFFSET_TO_HPMAG      = 274;
    static int LENGTH_OF_HPMAG      =   7;
    static int OFFSET_TO_E_HPMAG    = 282;
    static int LENGTH_OF_E_HPMAG    =   6;
    static int OFFSET_TO_HPSCAT     = 289;
    static int LENGTH_OF_HPSCAT     =   5;
    static int OFFSET_TO_O_HPMAG    = 295;
    static int LENGTH_OF_O_HPMAG    =   3;
    static int OFFSET_TO_M_HPMAG    = 299;
    static int LENGTH_OF_M_HPMAG    =   1;
    static int OFFSET_TO_HPMAX      = 301;
    static int LENGTH_OF_HPMAX      =   5;
    static int OFFSET_TO_HPMIN      = 307;
    static int LENGTH_OF_HPMIN      =   5;
    static int OFFSET_TO_PERIOD     = 313;
    static int LENGTH_OF_PERIOD     =   7;
    static int OFFSET_TO_HVARTYPE   = 321;
    static int LENGTH_OF_HVARTYPE   =   1;
    static int OFFSET_TO_MOREVAR    = 323;
    static int LENGTH_OF_MOREVAR    =   1;
    static int OFFSET_TO_MOREPHOTO  = 325;
    static int LENGTH_OF_MOREPHOTO  =   1;
    static int OFFSET_TO_CCDM       = 327;
    static int LENGTH_OF_CCDM       =   10;
    static int OFFSET_TO_N_CCDM     = 338;
    static int LENGTH_OF_N_CCDM     =   1;
    static int OFFSET_TO_NSYS       = 340;
    static int LENGTH_OF_NSYS       =   2;
    static int OFFSET_TO_NCOMP      = 343;
    static int LENGTH_OF_NCOMP      =   2;
    static int OFFSET_TO_MULTFLAG   = 346;
    static int LENGTH_OF_MULTFLAG   =   1;
    static int OFFSET_TO_SOURCE     = 348;
    static int LENGTH_OF_SOURCE     =   1;
    static int OFFSET_TO_QUAL       = 350;
    static int LENGTH_OF_QUAL       =   1;
    static int OFFSET_TO_M_HIP      = 352;
    static int LENGTH_OF_M_HIP      =   2;
    static int OFFSET_TO_THETA      = 355;
    static int LENGTH_OF_THETA      =   3;
    static int OFFSET_TO_RHO        = 359;
    static int LENGTH_OF_RHO        =   7;
    static int OFFSET_TO_E_RHO      = 367;
    static int LENGTH_OF_E_RHO      =   5;
    static int OFFSET_TO_DHP        = 373;
    static int LENGTH_OF_DHP        =   5;
    static int OFFSET_TO_E_DHP      = 379;
    static int LENGTH_OF_E_DHP      =   4;
    static int OFFSET_TO_SURVEY     = 384;
    static int LENGTH_OF_SURVEY     =   1;
    static int OFFSET_TO_CHART      = 386;
    static int LENGTH_OF_CHART      =   1;
    static int OFFSET_TO_NOTES      = 388;
    static int LENGTH_OF_NOTES      =   1;
    static int OFFSET_TO_HD         = 390;
    static int LENGTH_OF_HD         =   6;
    static int OFFSET_TO_BD         = 397;
    static int LENGTH_OF_BD         =   10;
    static int OFFSET_TO_COD        = 408;
    static int LENGTH_OF_COD        =   10;
    static int OFFSET_TO_CPD        = 419;
    static int LENGTH_OF_CPD        =   10;
    static int OFFSET_TO_VI_RED     = 430;
    static int LENGTH_OF_VI_RED     =   4;
    static int OFFSET_TO_SPTYPE     = 435;
    static int LENGTH_OF_SPTYPE     =   12;
    static int OFFSET_TO_R_SPTYPE   = 448;
    static int LENGTH_OF_R_SPTYPE   =   1;
E 3

E 5
I 4
    private static FileInputStream m_FileInput = null;
	private static FileWriter m_FileOutput = null;
I 5
	private static FileWriter m_PltFileOutput = null;
E 5

E 4
D 5
    private static class CommandLineParser extends IOFilterParser
   	{
   	    public CommandLineParser() throws IllegalArgumentException, LexerCreationException
   	    {
   	        super();
   	
   	        this.register(new Parser.ArgSemantic("verbose", "v", "Verbose reporting", "java.lang.Boolean", false));
   	    }

   	    public Boolean getVerbose()
   	    {
   	        return((Boolean) getParsedArgument("verbose"));
   	    }
   	}

I 3
	private static Character trimAndValidateCharacter(String value)
E 5
I 5
    private static boolean  m_Verbose;
    private static int 		m_Records;
    private static int 		m_RecordsProcessed;

    static FieldDefinitionTable       m_Fields;
    
    static
E 5
    {
D 5
        Character ch = null;

        if ( value.trim().length() != 0 )
E 5
I 5
        try
E 5
        {
D 5
            ch = new Character(value.charAt(0));
		}

        return ch;
    }

	private static Integer trimAndValidateInteger(String value)
    {
        Integer v = null;

        if ( value.trim().length() != 0 )
E 5
I 5
            m_Fields = FieldDefinitionTable.getCanonicalTable();
        }
        catch (RuntimeException error)
E 5
        {
D 5
            v = new Integer(value.trim());
		}

        return v;
    }
E 5
I 5
        }
    }    
E 5

D 5
	private static Float trimAndValidateFloat(String value)
E 5
I 5
    private static void log(String msg)
E 5
    {
D 5
        Float v = null;
E 5
I 5
      if ( m_Verbose == true )
      {
          System.out.println("record(" + m_RecordsProcessed + ") " + msg);
      }
    }
E 5

D 5
        if ( value.trim().length() != 0 )
        {
            v = new Float(value.trim());
		}
E 5

D 5
        return v;
    }
	private static String trimAndValidateString(String value)
E 5
I 5
    private static void printOutConvertedCoords(Integer HIP, String RA, String DE, Float Parallax) throws java.io.IOException
E 5
    {
D 5
        String v = null;
E 5
I 5
        if (HIP == null )
        {
            throw new IllegalArgumentException("record(" + m_RecordsProcessed + ") " +"HIP was null");
        }
E 5

D 5
        if ( value.trim().length() != 0 )
E 5
I 5
        if (RA == null )
E 5
        {
D 5
            v = new String(value.trim());
		}
E 5
I 5
            throw new IllegalArgumentException("record(" + m_RecordsProcessed + ") " +"RA was null");
        }
E 5

D 5
        return v;
    }
E 5
I 5
        if (DE == null )
        {
            throw new IllegalArgumentException("record(" + m_RecordsProcessed + ") " +"DE was null");
        }
E 5

I 5
        if (Parallax == null )
        {
            throw new IllegalArgumentException("record(" + m_RecordsProcessed + ") " +"Parallax was null");
        }
E 5

D 4
    private static void readAndResolve(byte[] readBfr)
E 4
I 4
D 5
    private static void printOutConvertedCoords(Integer HIP, String RA, String DE, Float Parallax) throws java.io.IOException
    {
E 5
		// Tokenize the RA and DE

        StringTokenizer RATokens = new StringTokenizer(RA," ", false);

D 5
        //System.out.println("Tokens = " + RATokens.countTokens());
E 5
I 5
        //log("Tokens = " + RATokens.countTokens());
E 5

        Double ra_hours = new Double(RATokens.nextToken());
        Double ra_minutes = new Double(RATokens.nextToken());
        Double ra_secs = new Double(RATokens.nextToken());


        StringTokenizer DETokens = new StringTokenizer(RA," ", false);

D 5
        //System.out.println("Tokens = " + DETokens.countTokens());
E 5
I 5
        //log("Tokens = " + DETokens.countTokens());
E 5

        Double de_deg = new Double(DETokens.nextToken());
        Double de_minutes = new Double(DETokens.nextToken());
        Double de_secs = new Double(DETokens.nextToken());

        // Get the distance in Parsecs

        double distance_in_parsecs = 1000 / Parallax.doubleValue();

        // Get the distance in Light Years

        double distance_in_lightyears = 3.26 * distance_in_parsecs;

        // Now calculate the rho, phi, theta

        double phi = (ra_hours.doubleValue() * 15) + (ra_minutes.doubleValue() * 0.25) + (ra_secs.doubleValue() * 0.0041666);

D 5
        //System.out.println("phi = " + phi );
E 5
I 5
        //log("phi = " + phi );
E 5

		double sign = 1.0;

        if ( Math.abs(de_deg.doubleValue()) != de_deg.doubleValue())
        {
            sign = -1.0;
        }

        double theta = ( Math.abs(de_deg.doubleValue()) + (ra_minutes.doubleValue()/60) + (ra_secs.doubleValue()/3600)) * sign;

D 5
        //System.out.println("theta = " + theta );
E 5
I 5
        //log("theta = " + theta );
E 5

        double rho = distance_in_lightyears;

D 5
        //System.out.println("rho = " + rho );
E 5
I 5
        //log("rho = " + rho );
E 5

		// Claculate th ecartesian coords

        double rvect = rho * Math.cos(theta);

        double x = rvect * Math.cos(phi);
        double y = rvect * Math.sin(phi);
		double z = rvect * Math.sin(theta);

        // Do it in galatic

        double x_galatic = -(0.0550*x) - (0.8734*y) - (0.4839*z);
        double y_galatic = (0.4940*x) - (0.4449*y) + (0.7470*z);
		double z_galatic = -(0.8677*x) - (0.1979*y) + (0.4560*z);

D 5
        m_FileOutput.write(HIP + "   " + x_galatic + "," + y_galatic + "," + z_galatic + "\n");
E 5
I 5
        m_FileOutput.write(x_galatic + "    " + y_galatic + "    " + z_galatic + "\n");
E 5
    }

D 5
    private static void readAndResolve(byte[] readBfr) throws java.io.IOException
E 5
I 5
    private static void readAndResolve(char[] readBfr) throws java.io.IOException
E 5
E 4
    {
I 5
	    m_RecordsProcessed++;

E 5
        //  field:H0     units:N/A     
        //  possibles: [H] Catalogue (H=Hipparcos)
        
D 5
        String         Catalog_asText                = new String(readBfr, OFFSET_TO_CATALOG, LENGTH_OF_CATALOG);
        System.out.println("Catalog_asText = " + Catalog_asText);
        Character         Catalog = trimAndValidateCharacter(Catalog_asText);
E 5
I 5
//        String         Catalog_asText                = new String(readBfr, OFFSET_TO_CATALOG, LENGTH_OF_CATALOG);
//        log("Catalog_asText = " + Catalog_asText);
//        Character         Catalog = trimAndValidateCharacter(Catalog_asText);
E 5
        
        //  field:H1     Nunitunits:s:/A     
        //  possibles: Identifier (HIP number)
        
D 5
        String         HIP_asText                    = new String(readBfr, OFFSET_TO_HIP, LENGTH_OF_HIP);
        System.out.println("HIP_asText = " + HIP_asText);
        Integer         HIP = trimAndValidateInteger(HIP_asText);
E 5
I 5
//        String         HIP_asText                    = new String(readBfr, OFFSET_TO_HIP, LENGTH_OF_HIP);
//        log("HIP_asText = " + HIP_asText);
//        Integer         HIP = trimAndValidateInteger(HIP_asText);
E 5
                
        //  field:H2     Nunitunits:s:/A    
        //  possibles: *[HT] Proximity flag
        
D 5
        String         Proxy_asText                  = new String(readBfr, OFFSET_TO_PROXY, LENGTH_OF_PROXY);
        System.out.println("Proxy_asText = " + Proxy_asText);
        Character         Proxy = trimAndValidateCharacter(Proxy_asText);
E 5
I 5
//        String         Proxy_asText                  = new String(readBfr, OFFSET_TO_PROXY, LENGTH_OF_PROXY);
//        log("Proxy_asText = " + Proxy_asText);
//        Character         Proxy = trimAndValidateCharacter(Proxy_asText);
E 5
                
        //  field:H3     Nunitunits:s:/A     
        //  possibles: Right ascension in h m s, ICRS (J1991.25)
        
D 5
        String         RAhms_asText                  = new String(readBfr, OFFSET_TO_RAHMS, LENGTH_OF_RAHMS);
        System.out.println("RAhms_asText = " + RAhms_asText);
        String         RAhms = trimAndValidateString(RAhms_asText);
E 5
I 5
//        String         RAhms_asText                  = new String(readBfr, OFFSET_TO_RAHMS, LENGTH_OF_RAHMS);
//        log("RAhms_asText = " + RAhms_asText);
//        String         RAhms = trimAndValidateString(RAhms_asText);
E 5
                
        //  field:H4     Nunitunits:s:/A     
        //  possibles: Declination in deg ' ", ICRS (J1991.25)
        
D 5
        String         DEdms_asText                  = new String(readBfr, OFFSET_TO_DEDMS, LENGTH_OF_DEDMS);
        System.out.println("DEdms_asText = " + DEdms_asText);
        String         DEdms = trimAndValidateString(DEdms_asText);
E 5
I 5
//        String         DEdms_asText                  = new String(readBfr, OFFSET_TO_DEDMS, LENGTH_OF_DEDMS);
//        log("DEdms_asText = " + DEdms_asText);
//        String         DEdms = trimAndValidateString(DEdms_asText);
E 5
                
        //  field:H5     mag     unitunits:s:? Magnitude 
        //  possibles: in Johnson V
        
D 5
        String         Vmag_asText                   = new String(readBfr, OFFSET_TO_VMAG, LENGTH_OF_VMAG);
        System.out.println("Vmag_asText = " + Vmag_asText);
        Float         Vmag = trimAndValidateFloat(Vmag_asText);
E 5
I 5
//        String         Vmag_asText                   = new String(readBfr, OFFSET_TO_VMAG, LENGTH_OF_VMAG);
//        log("Vmag_asText = " + Vmag_asText);
//        Float         Vmag = trimAndValidateFloat(Vmag_asText);
E 5
                
        //  field:H6     Nunitunits:s:/A    
        //  possibles: *[1,3]? Coarse variability flag
        
D 4
        String         VarFlag_asText                = new String(readBfr, OFFSET_TO_VARFLAG, LENGTH_OF_VARFLAG);
        System.out.println("VarFlag_asText = " + VarFlag_asText);
        Integer         VarFlag = trimAndValidateInteger(VarFlag_asText);
E 4
I 4
//        String         VarFlag_asText                = new String(readBfr, OFFSET_TO_VARFLAG, LENGTH_OF_VARFLAG);
D 5
//        System.out.println("VarFlag_asText = " + VarFlag_asText);
E 5
I 5
//        log("VarFlag_asText = " + VarFlag_asText);
E 5
//        Integer         VarFlag = trimAndValidateInteger(VarFlag_asText);
E 4
                
        //  field:H7     Nunitunits:s:/A    
        //  possibles: *[GHT] Source of magnitude
        
D 4
        String         r_Vmag_asText                 = new String(readBfr, OFFSET_TO_R_VMAG, LENGTH_OF_R_VMAG);
        System.out.println("r_Vmag_asText = " + r_Vmag_asText);
        Character         r_Vmag = trimAndValidateCharacter(r_Vmag_asText);
E 4
I 4
//        String         r_Vmag_asText                 = new String(readBfr, OFFSET_TO_R_VMAG, LENGTH_OF_R_VMAG);
D 5
//        System.out.println("r_Vmag_asText = " + r_Vmag_asText);
E 5
I 5
//        log("r_Vmag_asText = " + r_Vmag_asText);
E 5
//        Character         r_Vmag = trimAndValidateCharacter(r_Vmag_asText);
E 4
                
        //  field:H8     deg    unitunits:s:*? alpha
        //  possibles: , degrees (ICRS, Epoch=J1991.25)
        
D 4
        String         RAdeg_asText                  = new String(readBfr, OFFSET_TO_RADEG, LENGTH_OF_RADEG);
        System.out.println("RAdeg_asText = " + RAdeg_asText);
        Float         RAdeg = trimAndValidateFloat(RAdeg_asText);
E 4
I 4
//        String         RAdeg_asText                  = new String(readBfr, OFFSET_TO_RADEG, LENGTH_OF_RADEG);
D 5
//        System.out.println("RAdeg_asText = " + RAdeg_asText);
E 5
I 5
//        log("RAdeg_asText = " + RAdeg_asText);
E 5
//        Float         RAdeg = trimAndValidateFloat(RAdeg_asText);
E 4
                
        //  field:H9     deg    unitunits:s:*? delta
        //  possibles: , degrees (ICRS, Epoch=J1991.25)
        
D 4
        String         DEdeg_asText                  = new String(readBfr, OFFSET_TO_DEDEG, LENGTH_OF_DEDEG);
        System.out.println("DEdeg_asText = " + DEdeg_asText);
        Float         DEdeg = trimAndValidateFloat(DEdeg_asText);
E 4
I 4
//        String         DEdeg_asText                  = new String(readBfr, OFFSET_TO_DEDEG, LENGTH_OF_DEDEG);
D 5
//        System.out.println("DEdeg_asText = " + DEdeg_asText);
E 5
I 5
//        log("DEdeg_asText = " + DEdeg_asText);
E 5
//        Float         DEdeg = trimAndValidateFloat(DEdeg_asText);
E 4
                
        // field:H10     Nunitunits:s:/A    
        //  possibles: *[*+String-Z] Reference flag for astrometry
        
D 4
        String         AstroRef_asText               = new String(readBfr, OFFSET_TO_ASTROREF, LENGTH_OF_ASTROREF);
        System.out.println("AstroRef_asText = " + AstroRef_asText);
        Character         AstroRef = trimAndValidateCharacter(AstroRef_asText);
E 4
I 4
//        String         AstroRef_asText               = new String(readBfr, OFFSET_TO_ASTROREF, LENGTH_OF_ASTROREF);
D 5
//        System.out.println("AstroRef_asText = " + AstroRef_asText);
E 5
I 5
//        log("AstroRef_asText = " + AstroRef_asText);
E 5
//        Character         AstroRef = trimAndValidateCharacter(AstroRef_asText);
E 4
                
        // field:H11     mas     unitunits:s:? Trigonometric 
        //  possibles: parallax
        
D 5
        String         Plx_asText                    = new String(readBfr, OFFSET_TO_PLX, LENGTH_OF_PLX);
        System.out.println("Plx_asText = " + Plx_asText);
        Float         Plx = trimAndValidateFloat(Plx_asText);
                
        // field:H12    masunitunits:s:/yr   
E 5
I 5
//        String         Plx_asText                    = new String(readBfr, OFFSET_TO_PLX, LENGTH_OF_PLX);
//        log("Plx_asText = " + Plx_asText)//;
//        Float         Plx = trimAndValidateFloat(Plx_asText);

        // field:H12    masunitunits:s:/yr
E 5
        //  possibles: ? Proper motion mu_alpha.cos(delta), ICRS
        
D 4
        String         pmRA_asText                   = new String(readBfr, OFFSET_TO_PMRA, LENGTH_OF_PMRA);
        System.out.println("pmRA_asText = " + pmRA_asText);
        Float         pmRA = trimAndValidateFloat(pmRA_asText);
E 4
I 4
//        String         pmRA_asText                   = new String(readBfr, OFFSET_TO_PMRA, LENGTH_OF_PMRA);
D 5
//        System.out.println("pmRA_asText = " + pmRA_asText);
E 5
I 5
//        log("pmRA_asText = " + pmRA_asText);
E 5
//        Float         pmRA = trimAndValidateFloat(pmRA_asText);
E 4
                
        // field:H13    masunitunits:s:/yr   
        //  possibles: ? Proper motion mu_delta, ICRS
        
D 4
        String         pmDE_asText                   = new String(readBfr, OFFSET_TO_PMDE, LENGTH_OF_PMDE);
        System.out.println("pmDE_asText = " + pmDE_asText);
        Float         pmDE = trimAndValidateFloat(pmDE_asText);
E 4
I 4
//        String         pmDE_asText                   = new String(readBfr, OFFSET_TO_PMDE, LENGTH_OF_PMDE);
D 5
//        System.out.println("pmDE_asText = " + pmDE_asText);
E 5
I 5
//        log("pmDE_asText = " + pmDE_asText);
E 5
//        Float         pmDE = trimAndValidateFloat(pmDE_asText);
E 4
                
        // field:H14     mas     unitunits:s:? Standard 
        //  possibles: error in RA*cos(DEdeg)
        
D 4
        String         e_RAdeg_asText                = new String(readBfr, OFFSET_TO_E_RADEG, LENGTH_OF_E_RADEG);
        System.out.println("e_RAdeg_asText = " + e_RAdeg_asText);
        Float         e_RAdeg = trimAndValidateFloat(e_RAdeg_asText);
E 4
I 4
//        String         e_RAdeg_asText                = new String(readBfr, OFFSET_TO_E_RADEG, LENGTH_OF_E_RADEG);
D 5
//        System.out.println("e_RAdeg_asText = " + e_RAdeg_asText);
E 5
I 5
//        log("e_RAdeg_asText = " + e_RAdeg_asText);
E 5
//        Float         e_RAdeg = trimAndValidateFloat(e_RAdeg_asText);
E 4
                
        // field:H15     mas     unitunits:s:? Standard 
        //  possibles: error in DE
        
D 4
        String         e_DEdeg_asText                = new String(readBfr, OFFSET_TO_E_DEDEG, LENGTH_OF_E_DEDEG);
        System.out.println("e_DEdeg_asText = " + e_DEdeg_asText);
        Float         e_DEdeg = trimAndValidateFloat(e_DEdeg_asText);
E 4
I 4
//        String         e_DEdeg_asText                = new String(readBfr, OFFSET_TO_E_DEDEG, LENGTH_OF_E_DEDEG);
D 5
//        System.out.println("e_DEdeg_asText = " + e_DEdeg_asText);
E 5
I 5
//        log("e_DEdeg_asText = " + e_DEdeg_asText);
E 5
//        Float         e_DEdeg = trimAndValidateFloat(e_DEdeg_asText);
E 4
                
        // field:H16     mas     unitunits:s:? Standard 
        //  possibles: error in Plx
        
D 4
        String         e_Plx_asText                  = new String(readBfr, OFFSET_TO_E_PLX, LENGTH_OF_E_PLX);
        System.out.println("e_Plx_asText = " + e_Plx_asText);
        Float         e_Plx =trimAndValidateFloat(e_Plx_asText);
E 4
I 4
//        String         e_Plx_asText                  = new String(readBfr, OFFSET_TO_E_PLX, LENGTH_OF_E_PLX);
D 5
//        System.out.println("e_Plx_asText = " + e_Plx_asText);
E 5
I 5
//        log("e_Plx_asText = " + e_Plx_asText);
E 5
//        Float         e_Plx =trimAndValidateFloat(e_Plx_asText);
E 4
                
        // field:H17    masunitunits:s:/yr   
        //  possibles: ? Standard error in pmRA
        
D 4
        String         e_pmRA_asText                 = new String(readBfr, OFFSET_TO_E_PMRA, LENGTH_OF_E_PMRA);
        System.out.println("e_pmRA_asText = " + e_pmRA_asText);
        Float         e_pmRA = trimAndValidateFloat(e_pmRA_asText);
E 4
I 4
//        String         e_pmRA_asText                 = new String(readBfr, OFFSET_TO_E_PMRA, LENGTH_OF_E_PMRA);
D 5
//        System.out.println("e_pmRA_asText = " + e_pmRA_asText);
E 5
I 5
//        log("e_pmRA_asText = " + e_pmRA_asText);
E 5
//        Float         e_pmRA = trimAndValidateFloat(e_pmRA_asText);
E 4
                
        // field:H18    masunitunits:s:/yr   
        //  possibles: ? Standard error in pmDE
        
D 4
        String         e_pmDE_asText                 = new String(readBfr, OFFSET_TO_E_PMDE, LENGTH_OF_E_PMDE);
        System.out.println("e_pmDE_asText = " + e_pmDE_asText);
        Float         e_pmDE = trimAndValidateFloat(e_pmDE_asText);
E 4
I 4
//        String         e_pmDE_asText                 = new String(readBfr, OFFSET_TO_E_PMDE, LENGTH_OF_E_PMDE);
D 5
//        System.out.println("e_pmDE_asText = " + e_pmDE_asText);
E 5
I 5
//        log("e_pmDE_asText = " + e_pmDE_asText);
E 5
//        Float         e_pmDE = trimAndValidateFloat(e_pmDE_asText);
E 4
                
        // field:H19     Nunitunits:s:/A     
        //  possibles: [-1/1]? Correlation, DE/RA*cos(delta)
        
D 4
        String         DE_RA_asText                  = new String(readBfr, OFFSET_TO_DE_RA, LENGTH_OF_DE_RA);
        System.out.println("DE_RA_asText = " + DE_RA_asText);
        Float         DE_RA = trimAndValidateFloat(DE_RA_asText);
E 4
I 4
//        String         DE_RA_asText                  = new String(readBfr, OFFSET_TO_DE_RA, LENGTH_OF_DE_RA);
D 5
//        System.out.println("DE_RA_asText = " + DE_RA_asText);
E 5
I 5
//        log("DE_RA_asText = " + DE_RA_asText);
E 5
//        Float         DE_RA = trimAndValidateFloat(DE_RA_asText);
E 4
                
        // field:H20     Nunitunits:s:/A     
        //  possibles: [-1/1]? Correlation, Plx/RA*cos(delta)
        
D 4
        String         Plx_RA_asText                 = new String(readBfr, OFFSET_TO_PLX_RA, LENGTH_OF_PLX_RA);
        System.out.println("Plx_RA_asText = " + Plx_RA_asText);
        Float         Plx_RA = trimAndValidateFloat(Plx_RA_asText);
E 4
I 4
//        String         Plx_RA_asText                 = new String(readBfr, OFFSET_TO_PLX_RA, LENGTH_OF_PLX_RA);
D 5
//        System.out.println("Plx_RA_asText = " + Plx_RA_asText);
E 5
I 5
//        log("Plx_RA_asText = " + Plx_RA_asText);
E 5
//        Float         Plx_RA = trimAndValidateFloat(Plx_RA_asText);
E 4
                
        // field:H21     Nunitunits:s:/A     
        //  possibles: [-1/1]? Correlation, Plx/DE
        
D 4
        String         Plx_DE_asText                 = new String(readBfr, OFFSET_TO_PLX_DE, LENGTH_OF_PLX_DE);
        System.out.println("Plx_DE_asText = " + Plx_DE_asText);
        Float         Plx_DE = trimAndValidateFloat(Plx_DE_asText);
E 4
I 4
//        String         Plx_DE_asText                 = new String(readBfr, OFFSET_TO_PLX_DE, LENGTH_OF_PLX_DE);
D 5
//        System.out.println("Plx_DE_asText = " + Plx_DE_asText);
E 5
I 5
//        log("Plx_DE_asText = " + Plx_DE_asText);
E 5
//        Float         Plx_DE = trimAndValidateFloat(Plx_DE_asText);
E 4
                
        // field:H22     Nunitunits:s:/A     
        //  possibles: [-1/1]? Correlation, pmRA/RA*cos(delta)
        
D 4
        String         pmRA_RA_asText                = new String(readBfr, OFFSET_TO_PMRA_RA, LENGTH_OF_PMRA_RA);
        System.out.println("pmRA_RA_asText = " + pmRA_RA_asText);
        Float         pmRA_RA = trimAndValidateFloat(pmRA_RA_asText);
E 4
I 4
//        String         pmRA_RA_asText                = new String(readBfr, OFFSET_TO_PMRA_RA, LENGTH_OF_PMRA_RA);
D 5
//        System.out.println("pmRA_RA_asText = " + pmRA_RA_asText);
E 5
I 5
//        log("pmRA_RA_asText = " + pmRA_RA_asText);
E 5
//        Float         pmRA_RA = trimAndValidateFloat(pmRA_RA_asText);
E 4
                
        // field:H23     Nunitunits:s:/A     
        //  possibles: [-1/1]? Correlation, pmRA/DE
        
D 4
        String         pmRA_DE_asText                = new String(readBfr, OFFSET_TO_PMRA_DE, LENGTH_OF_PMRA_DE);
        System.out.println("pmRA_DE_asText = " + pmRA_DE_asText);
        Float         pmRA_DE  = trimAndValidateFloat(pmRA_DE_asText);
E 4
I 4
//        String         pmRA_DE_asText                = new String(readBfr, OFFSET_TO_PMRA_DE, LENGTH_OF_PMRA_DE);
D 5
//        System.out.println("pmRA_DE_asText = " + pmRA_DE_asText);
E 5
I 5
//        log("pmRA_DE_asText = " + pmRA_DE_asText);
E 5
//        Float         pmRA_DE  = trimAndValidateFloat(pmRA_DE_asText);
E 4
                
        // field:H24     Nunitunits:s:/A     
        //  possibles: [-1/1]? Correlation, pmRA/Plx
        
D 4
        String         pmRA_Plx_asText               = new String(readBfr, OFFSET_TO_PMRA_PLX, LENGTH_OF_PMRA_PLX);
        System.out.println("pmRA_Plx_asText = " + pmRA_Plx_asText);
        Float         pmRA_Plx = trimAndValidateFloat(pmRA_Plx_asText);
E 4
I 4
//        String         pmRA_Plx_asText               = new String(readBfr, OFFSET_TO_PMRA_PLX, LENGTH_OF_PMRA_PLX);
D 5
//        System.out.println("pmRA_Plx_asText = " + pmRA_Plx_asText);
E 5
I 5
//        log("pmRA_Plx_asText = " + pmRA_Plx_asText);
E 5
//        Float         pmRA_Plx = trimAndValidateFloat(pmRA_Plx_asText);
E 4
                
        // field:H25     Nunitunits:s:/A     
        //  possibles: [-1/1]? Correlation, pmDE/RA*cos(delta)
        
D 4
        String         pmDE_RA_asText                = new String(readBfr, OFFSET_TO_PMDE_RA, LENGTH_OF_PMDE_RA);
        System.out.println("pmDE_RA_asText = " + pmDE_RA_asText);
        Float         pmDE_RA = trimAndValidateFloat(pmDE_RA_asText);
E 4
I 4
//        String         pmDE_RA_asText                = new String(readBfr, OFFSET_TO_PMDE_RA, LENGTH_OF_PMDE_RA);
D 5
//        System.out.println("pmDE_RA_asText = " + pmDE_RA_asText);
E 5
I 5
//        log("pmDE_RA_asText = " + pmDE_RA_asText);
E 5
//        Float         pmDE_RA = trimAndValidateFloat(pmDE_RA_asText);
E 4
                
        // field:H26     Nunitunits:s:/A     
        //  possibles: [-1/1]? Correlation, pmDE/DE
        
D 4
        String         pmDE_DE_asText                = new String(readBfr, OFFSET_TO_PMDE_DE, LENGTH_OF_PMDE_DE);
        System.out.println("pmDE_DE_asText = " + pmDE_DE_asText);
        Float         pmDE_DE = trimAndValidateFloat(pmDE_DE_asText);
E 4
I 4
//        String         pmDE_DE_asText                = new String(readBfr, OFFSET_TO_PMDE_DE, LENGTH_OF_PMDE_DE);
D 5
//        System.out.println("pmDE_DE_asText = " + pmDE_DE_asText);
E 5
I 5
//        log("pmDE_DE_asText = " + pmDE_DE_asText);
E 5
//        Float         pmDE_DE = trimAndValidateFloat(pmDE_DE_asText);
E 4
                
        // field:H27     Nunitunits:s:/A     
        //  possibles: [-1/1]? Correlation, pmDE/Plx
        
D 4
        String         pmDE_Plx_asText               = new String(readBfr, OFFSET_TO_PMDE_PLX, LENGTH_OF_PMDE_PLX);
        System.out.println("pmDE_Plx_asText = " + pmDE_Plx_asText);
        Float         pmDE_Plx = trimAndValidateFloat(pmDE_Plx_asText);
E 4
I 4
//        String         pmDE_Plx_asText               = new String(readBfr, OFFSET_TO_PMDE_PLX, LENGTH_OF_PMDE_PLX);
D 5
//        System.out.println("pmDE_Plx_asText = " + pmDE_Plx_asText);
E 5
I 5
//        log("pmDE_Plx_asText = " + pmDE_Plx_asText);
E 5
//        Float         pmDE_Plx = trimAndValidateFloat(pmDE_Plx_asText);
E 4
                
        // field:H28     Nunitunits:s:/A     
        //  possibles: [-1/1]? Correlation, pmDE/pmRA
        
D 4
        String         pmDE_pmRA_asText              = new String(readBfr, OFFSET_TO_PMDE_PMRA, LENGTH_OF_PMDE_PMRA);
        System.out.println("pmDE_pmRA_asText = " + pmDE_pmRA_asText);
        Float         pmDE_pmRA = trimAndValidateFloat(pmDE_pmRA_asText);
E 4
I 4
//        String         pmDE_pmRA_asText              = new String(readBfr, OFFSET_TO_PMDE_PMRA, LENGTH_OF_PMDE_PMRA);
D 5
//        System.out.println("pmDE_pmRA_asText = " + pmDE_pmRA_asText);
E 5
I 5
//        log("pmDE_pmRA_asText = " + pmDE_pmRA_asText);
E 5
//        Float         pmDE_pmRA = trimAndValidateFloat(pmDE_pmRA_asText);
E 4
                
        // field:H29     %       unitunits:s:? Percentage 
        //  possibles: of rejected data
        
D 4
        String         F1_asText                     = new String(readBfr, OFFSET_TO_F1, LENGTH_OF_F1);
        System.out.println("F1_asText = " + F1_asText);
        Integer         F1 = trimAndValidateInteger(F1_asText);
E 4
I 4
//        String         F1_asText                     = new String(readBfr, OFFSET_TO_F1, LENGTH_OF_F1);
D 5
//        System.out.println("F1_asText = " + F1_asText);
E 5
I 5
//        log("F1_asText = " + F1_asText);
E 5
//        Integer         F1 = trimAndValidateInteger(F1_asText);
E 4
                
        // field:H30     Nunitunits:s:/A    
        //  possibles: *? Goodness-of-fit parameter
        
D 4
        String         F2_asText                     = new String(readBfr, OFFSET_TO_F2, LENGTH_OF_F2);
        System.out.println("F2_asText = " + F2_asText);
        Float         F2 = trimAndValidateFloat(F2_asText);
E 4
I 4
//        String         F2_asText                     = new String(readBfr, OFFSET_TO_F2, LENGTH_OF_F2);
D 5
//        System.out.println("F2_asText = " + F2_asText);
E 5
I 5
//        log("F2_asText = " + F2_asText);
E 5
//        Float         F2 = trimAndValidateFloat(F2_asText);
E 4
                
        // field:H32     mag     unitunits:s:? Mean 
        //  possibles: BT magnitude
        
D 5
        String         BTmag_asText                  = new String(readBfr, OFFSET_TO_BTMAG, LENGTH_OF_BTMAG);
        System.out.println("BTmag_asText = " + BTmag_asText);
        Float         BTmag = trimAndValidateFloat(BTmag_asText);
E 5
I 5
//        String         BTmag_asText                  = new String(readBfr, OFFSET_TO_BTMAG, LENGTH_OF_BTMAG);
//        log("BTmag_asText = " + BTmag_asText);
//        Float         BTmag = trimAndValidateFloat(BTmag_asText);
E 5
                
        // field:H33     mag     unitunits:s:? Standard 
        //  possibles: error on BTmag
        
D 4
        String         e_BTmag_asText                = new String(readBfr, OFFSET_TO_E_BTMAG, LENGTH_OF_E_BTMAG);
        System.out.println("e_BTmag_asText = " + e_BTmag_asText);
        Float         e_BTmag = trimAndValidateFloat(e_BTmag_asText);
E 4
I 4
//        String         e_BTmag_asText                = new String(readBfr, OFFSET_TO_E_BTMAG, LENGTH_OF_E_BTMAG);
D 5
//        System.out.println("e_BTmag_asText = " + e_BTmag_asText);
E 5
I 5
//        log("e_BTmag_asText = " + e_BTmag_asText);
E 5
//        Float         e_BTmag = trimAndValidateFloat(e_BTmag_asText);
E 4
                
        // field:H34     mag     unitunits:s:? Mean 
        //  possibles: VT magnitude
        
D 4
        String         VTmag_asText                  = new String(readBfr, OFFSET_TO_VTMAG, LENGTH_OF_VTMAG);
        System.out.println("VTmag_asText = " + VTmag_asText);
        Float         VTmag = trimAndValidateFloat(VTmag_asText);
E 4
I 4
//        String         VTmag_asText                  = new String(readBfr, OFFSET_TO_VTMAG, LENGTH_OF_VTMAG);
D 5
//        System.out.println("VTmag_asText = " + VTmag_asText);
E 5
I 5
//        log("VTmag_asText = " + VTmag_asText);
E 5
//        Float         VTmag = trimAndValidateFloat(VTmag_asText);
E 4
                
        // field:H35     mag     unitunits:s:? Standard 
        //  possibles: error on VTmag
        
D 4
        String         e_VTmag_asText                = new String(readBfr, OFFSET_TO_E_VTMAG, LENGTH_OF_E_VTMAG);
        System.out.println("e_VTmag_asText = " + e_VTmag_asText);
        Float         e_VTmag = trimAndValidateFloat(e_VTmag_asText);
E 4
I 4
//        String         e_VTmag_asText                = new String(readBfr, OFFSET_TO_E_VTMAG, LENGTH_OF_E_VTMAG);
D 5
//        System.out.println("e_VTmag_asText = " + e_VTmag_asText);
E 5
I 5
//        log("e_VTmag_asText = " + e_VTmag_asText);
E 5
//        Float         e_VTmag = trimAndValidateFloat(e_VTmag_asText);
E 4
                
        // field:H36     Nunitunits:s:/A    
        //  possibles: *[String-Z*-] Reference flag for BT and VTmag
        
D 4
        String         m_BTmag_asText                = new String(readBfr, OFFSET_TO_M_BTMAG, LENGTH_OF_M_BTMAG);
        System.out.println("m_BTmag_asText = " + m_BTmag_asText);
        Character         m_BTmag = trimAndValidateCharacter(m_BTmag_asText);
E 4
I 4
//        String         m_BTmag_asText                = new String(readBfr, OFFSET_TO_M_BTMAG, LENGTH_OF_M_BTMAG);
D 5
//        System.out.println("m_BTmag_asText = " + m_BTmag_asText);
E 5
I 5
//        log("m_BTmag_asText = " + m_BTmag_asText);
E 5
//        Character         m_BTmag = trimAndValidateCharacter(m_BTmag_asText);
E 4
                
        // field:H37     mag     unitunits:s:? Johnson 
        //  possibles: B-V colour
        
D 4
        String         B_V_asText                    = new String(readBfr, OFFSET_TO_B_V, LENGTH_OF_B_V);
        System.out.println("B_V_asText = " + B_V_asText);
        Float         B_V = trimAndValidateFloat(B_V_asText);
E 4
I 4
//        String         B_V_asText                    = new String(readBfr, OFFSET_TO_B_V, LENGTH_OF_B_V);
D 5
//        System.out.println("B_V_asText = " + B_V_asText);
E 5
I 5
//        log("B_V_asText = " + B_V_asText);
E 5
//        Float         B_V = trimAndValidateFloat(B_V_asText);
E 4
                
        // field:H38     mag     unitunits:s:? Standard 
        //  possibles: error on B-V
        
D 4
        String         e_B_V_asText                  = new String(readBfr, OFFSET_TO_E_B_V, LENGTH_OF_E_B_V);
        System.out.println("e_B_V_asText = " + e_B_V_asText);
        Float         e_B_V = trimAndValidateFloat(e_B_V_asText);
E 4
I 4
//        String         e_B_V_asText                  = new String(readBfr, OFFSET_TO_E_B_V, LENGTH_OF_E_B_V);
D 5
//        System.out.println("e_B_V_asText = " + e_B_V_asText);
E 5
I 5
//        log("e_B_V_asText = " + e_B_V_asText);
E 5
//        Float         e_B_V = trimAndValidateFloat(e_B_V_asText);
E 4
                
        // field:H39     Nunitunits:s:/A     
        //  possibles: [GT] Source of B-V from Ground or Tycho
        
D 4
        String         r_B_V_asText                  = new String(readBfr, OFFSET_TO_R_B_V, LENGTH_OF_R_B_V);
        System.out.println("r_B_V_asText = " + r_B_V_asText);
        Character         r_B_V = trimAndValidateCharacter(r_B_V_asText);
E 4
I 4
//        String         r_B_V_asText                  = new String(readBfr, OFFSET_TO_R_B_V, LENGTH_OF_R_B_V);
D 5
//        System.out.println("r_B_V_asText = " + r_B_V_asText);
E 5
I 5
//        log("r_B_V_asText = " + r_B_V_asText);
E 5
//        Character         r_B_V = trimAndValidateCharacter(r_B_V_asText);
E 4
                
        // field:H40     mag     unitunits:s:? Colour 
        //  possibles: index in Cousins' system
        
D 4
        String         V_I_asText                    = new String(readBfr, OFFSET_TO_V_I, LENGTH_OF_V_I);
        System.out.println("V_I_asText = " + V_I_asText);
        Float         V_I = trimAndValidateFloat(V_I_asText);
E 4
I 4
//        String         V_I_asText                    = new String(readBfr, OFFSET_TO_V_I, LENGTH_OF_V_I);
D 5
//        System.out.println("V_I_asText = " + V_I_asText);
E 5
I 5
//        log("V_I_asText = " + V_I_asText);
E 5
//        Float         V_I = trimAndValidateFloat(V_I_asText);
E 4
                
        // field:H41     mag     unitunits:s:? Standard 
        //  possibles: error on V-Integer
        
D 4
        String         e_V_I_asText                  = new String(readBfr, OFFSET_TO_E_V_I, LENGTH_OF_E_V_I);
        System.out.println("e_V_I_asText = " + e_V_I_asText);
        Float        e_V_I = trimAndValidateFloat(e_V_I_asText);
E 4
I 4
//        String         e_V_I_asText                  = new String(readBfr, OFFSET_TO_E_V_I, LENGTH_OF_E_V_I);
D 5
//        System.out.println("e_V_I_asText = " + e_V_I_asText);
E 5
I 5
//        log("e_V_I_asText = " + e_V_I_asText);
E 5
//        Float        e_V_I = trimAndValidateFloat(e_V_I_asText);
E 4
                
        // field:H42     Nunitunits:s:/A    
        //  possibles: *[String-T] Source of V-Integer
        
D 4
        String         r_V_I_asText                  = new String(readBfr, OFFSET_TO_R_V_I, LENGTH_OF_R_V_I);
        System.out.println("r_V_I_asText = " + r_V_I_asText);
        Character        r_V_I = trimAndValidateCharacter(r_V_I_asText);
E 4
I 4
//        String         r_V_I_asText                  = new String(readBfr, OFFSET_TO_R_V_I, LENGTH_OF_R_V_I);
D 5
//        System.out.println("r_V_I_asText = " + r_V_I_asText);
E 5
I 5
//        log("r_V_I_asText = " + r_V_I_asText);
E 5
//        Character        r_V_I = trimAndValidateCharacter(r_V_I_asText);
E 4
                
        // field:H43     Nunitunits:s:/A     
        //  possibles: [*] Flag for combined Vmag, B-V, V-Integer
        
D 4
        String         CombMag_asText                = new String(readBfr, OFFSET_TO_COMBMAG, LENGTH_OF_COMBMAG);
        System.out.println("CombMag_asText = " + CombMag_asText);
        Character         CombMag = trimAndValidateCharacter(CombMag_asText);
E 4
I 4
//        String         CombMag_asText                = new String(readBfr, OFFSET_TO_COMBMAG, LENGTH_OF_COMBMAG);
D 5
//        System.out.println("CombMag_asText = " + CombMag_asText);
E 5
I 5
//        log("CombMag_asText = " + CombMag_asText);
E 5
//        Character         CombMag = trimAndValidateCharacter(CombMag_asText);
E 4
                
        // field:H44     mag    unitunits:s:*? Median 
        //  possibles: magnitude in Hipparcos system
        
D 4
        String         Hpmag_asText                  = new String(readBfr, OFFSET_TO_HPMAG, LENGTH_OF_HPMAG);
        System.out.println("Hpmag_asText = " + Hpmag_asText);
        Float         Hpmag = trimAndValidateFloat(Hpmag_asText);
E 4
I 4
//        String         Hpmag_asText                  = new String(readBfr, OFFSET_TO_HPMAG, LENGTH_OF_HPMAG);
D 5
//        System.out.println("Hpmag_asText = " + Hpmag_asText);
E 5
I 5
//        log("Hpmag_asText = " + Hpmag_asText);
E 5
//        Float         Hpmag = trimAndValidateFloat(Hpmag_asText);
E 4
                
        // field:H45     mag    unitunits:s:*? Standard 
        //  possibles: error on Hpmag
        
D 4
        String         e_Hpmag_asText                = new String(readBfr, OFFSET_TO_E_HPMAG, LENGTH_OF_E_HPMAG);
        System.out.println("e_Hpmag_asText = " + e_Hpmag_asText);
        Float        e_Hpmag = trimAndValidateFloat(e_Hpmag_asText);
E 4
I 4
//        String         e_Hpmag_asText                = new String(readBfr, OFFSET_TO_E_HPMAG, LENGTH_OF_E_HPMAG);
D 5
//        System.out.println("e_Hpmag_asText = " + e_Hpmag_asText);
E 5
I 5
//        log("e_Hpmag_asText = " + e_Hpmag_asText);
E 5
//        Float        e_Hpmag = trimAndValidateFloat(e_Hpmag_asText);
E 4
                
        // field:H46     mag     unitunits:s:? Scatter 
        //  possibles: on Hpmag
        
D 4
        String         Hpscat_asText                 = new String(readBfr, OFFSET_TO_HPSCAT, LENGTH_OF_HPSCAT);
        System.out.println("Hpscat_asText = " + Hpscat_asText);
        Float         Hpscat = trimAndValidateFloat(Hpscat_asText);
E 4
I 4
//        String         Hpscat_asText                 = new String(readBfr, OFFSET_TO_HPSCAT, LENGTH_OF_HPSCAT);
D 5
//        System.out.println("Hpscat_asText = " + Hpscat_asText);
E 5
I 5
//        log("Hpscat_asText = " + Hpscat_asText);
E 5
//        Float         Hpscat = trimAndValidateFloat(Hpscat_asText);
E 4
                
        // field:H47     Nunitunits:s:/A     
        //  possibles: ? Number of observations for Hpmag
        
D 4
        String         o_Hpmag_asText                = new String(readBfr, OFFSET_TO_O_HPMAG, LENGTH_OF_O_HPMAG);
        System.out.println("o_Hpmag_asText = " + o_Hpmag_asText);
        Integer         o_Hpmag  = trimAndValidateInteger(o_Hpmag_asText);
E 4
I 4
//        String         o_Hpmag_asText                = new String(readBfr, OFFSET_TO_O_HPMAG, LENGTH_OF_O_HPMAG);
D 5
//        System.out.println("o_Hpmag_asText = " + o_Hpmag_asText);
E 5
I 5
//        log("o_Hpmag_asText = " + o_Hpmag_asText);
E 5
//        Integer         o_Hpmag  = trimAndValidateInteger(o_Hpmag_asText);
E 4
                
        // field:H48     Nunitunits:s:/A    
        //  possibles: *[String-Z*-] Reference flag for Hpmag
        
D 4
        String         m_Hpmag_asText                = new String(readBfr, OFFSET_TO_M_HPMAG, LENGTH_OF_M_HPMAG);
        System.out.println("m_Hpmag_asText = " + m_Hpmag_asText);
        Character         m_Hpmag  = trimAndValidateCharacter(m_Hpmag_asText);
E 4
I 4
//        String         m_Hpmag_asText                = new String(readBfr, OFFSET_TO_M_HPMAG, LENGTH_OF_M_HPMAG);
D 5
//        System.out.println("m_Hpmag_asText = " + m_Hpmag_asText);
E 5
I 5
//        log("m_Hpmag_asText = " + m_Hpmag_asText);
E 5
//        Character         m_Hpmag  = trimAndValidateCharacter(m_Hpmag_asText);
E 4
                
        // field:H49     mag     unitunits:s:? Hpmag 
        //  possibles: at maximum (5th percentile)
        
D 4
        String         Hpmax_asText                  = new String(readBfr, OFFSET_TO_HPMAX, LENGTH_OF_HPMAX);
        System.out.println("Hpmax_asText = " + Hpmax_asText);
        Float         Hpmax = trimAndValidateFloat(Hpmax_asText);
E 4
I 4
//        String         Hpmax_asText                  = new String(readBfr, OFFSET_TO_HPMAX, LENGTH_OF_HPMAX);
D 5
//        System.out.println("Hpmax_asText = " + Hpmax_asText);
E 5
I 5
//        log("Hpmax_asText = " + Hpmax_asText);
E 5
//        Float         Hpmax = trimAndValidateFloat(Hpmax_asText);
E 4
                
        // field:H50     mag     unitunits:s:? Hpmag 
        //  possibles: at minimum (95th percentile)
        
D 4
        String         HPmin_asText                  = new String(readBfr, OFFSET_TO_HPMIN, LENGTH_OF_HPMIN);
        System.out.println("HPmin_asText = " + HPmin_asText);
        Float         HPmin = trimAndValidateFloat(HPmin_asText);
E 4
I 4
//        String         HPmin_asText                  = new String(readBfr, OFFSET_TO_HPMIN, LENGTH_OF_HPMIN);
D 5
//        System.out.println("HPmin_asText = " + HPmin_asText);
E 5
I 5
//        log("HPmin_asText = " + HPmin_asText);
E 5
//        Float         HPmin = trimAndValidateFloat(HPmin_asText);
E 4
                
        // field:H51     d       unitunits:s:? Variability 
        //  possibles: period (days)
        
D 4
        String         Period_asText                 = new String(readBfr, OFFSET_TO_PERIOD, LENGTH_OF_PERIOD);
        System.out.println("Period_asText = " + Period_asText);
        Float         Period = trimAndValidateFloat(Period_asText);
E 4
I 4
//        String         Period_asText                 = new String(readBfr, OFFSET_TO_PERIOD, LENGTH_OF_PERIOD);
D 5
//        System.out.println("Period_asText = " + Period_asText);
E 5
I 5
//        log("Period_asText = " + Period_asText);
E 5
//        Float         Period = trimAndValidateFloat(Period_asText);
E 4
                
        // field:H52     Nunitunits:s:/A    
        //  possibles: *[CDMPRU]? variability type
        
D 4
        String         HvarType_asText               = new String(readBfr, OFFSET_TO_HVARTYPE, LENGTH_OF_HVARTYPE);
        System.out.println("HvarType_asText = " + HvarType_asText);
        Character         HvarType = trimAndValidateCharacter(HvarType_asText);
E 4
I 4
//        String         HvarType_asText               = new String(readBfr, OFFSET_TO_HVARTYPE, LENGTH_OF_HVARTYPE);
D 5
//        System.out.println("HvarType_asText = " + HvarType_asText);
E 5
I 5
//        log("HvarType_asText = " + HvarType_asText);
E 5
//        Character         HvarType = trimAndValidateCharacter(HvarType_asText);
E 4
                
        // field:H53     Nunitunits:s:/A    
        //  possibles: *[12] Additional data about variability
        
D 4
        String         moreVar_asText                = new String(readBfr, OFFSET_TO_MOREVAR, LENGTH_OF_MOREVAR);
        System.out.println("moreVar_asText = " + moreVar_asText);
        Character         moreVar = trimAndValidateCharacter(moreVar_asText);
E 4
I 4
//        String         moreVar_asText                = new String(readBfr, OFFSET_TO_MOREVAR, LENGTH_OF_MOREVAR);
D 5
//        System.out.println("moreVar_asText = " + moreVar_asText);
E 5
I 5
//        log("moreVar_asText = " + moreVar_asText);
E 5
//        Character         moreVar = trimAndValidateCharacter(moreVar_asText);
E 4
                
        // field:H54     Nunitunits:s:/A     
        //  possibles: [ABC] Light curve Annex
        
D 4
        String         morePhoto_asText              = new String(readBfr, OFFSET_TO_MOREPHOTO, LENGTH_OF_MOREPHOTO);
        System.out.println("morePhoto_asText = " + morePhoto_asText);
        Character         morePhoto = trimAndValidateCharacter(morePhoto_asText);
E 4
I 4
//        String         morePhoto_asText              = new String(readBfr, OFFSET_TO_MOREPHOTO, LENGTH_OF_MOREPHOTO);
D 5
//        System.out.println("morePhoto_asText = " + morePhoto_asText);
E 5
I 5
//        log("morePhoto_asText = " + morePhoto_asText);
E 5
//        Character         morePhoto = trimAndValidateCharacter(morePhoto_asText);
E 4
                
        // field:H55     Nunitunits:s:/A     
        //  possibles: CCDM identifier
        
D 4
        String         CCDM_asText                   = new String(readBfr, OFFSET_TO_CCDM, LENGTH_OF_CCDM);
        System.out.println("CCDM_asText = " + CCDM_asText);
        String         CCDM = trimAndValidateString(CCDM_asText);
E 4
I 4
//        String         CCDM_asText                   = new String(readBfr, OFFSET_TO_CCDM, LENGTH_OF_CCDM);
D 5
//        System.out.println("CCDM_asText = " + CCDM_asText);
E 5
I 5
//        log("CCDM_asText = " + CCDM_asText);
E 5
//        String         CCDM = trimAndValidateString(CCDM_asText);
E 4
                
        // field:H56     Nunitunits:s:/A    
        //  possibles: *[HIM] Historical status flag
        
D 4
        String         n_CCDM_asText                 = new String(readBfr, OFFSET_TO_N_CCDM, LENGTH_OF_N_CCDM);
        System.out.println("n_CCDM_asText = " + n_CCDM_asText);
        Character         n_CCDM = trimAndValidateCharacter(n_CCDM_asText);
E 4
I 4
//        String         n_CCDM_asText                 = new String(readBfr, OFFSET_TO_N_CCDM, LENGTH_OF_N_CCDM);
D 5
//        System.out.println("n_CCDM_asText = " + n_CCDM_asText);
E 5
I 5
//        log("n_CCDM_asText = " + n_CCDM_asText);
E 5
//        Character         n_CCDM = trimAndValidateCharacter(n_CCDM_asText);
E 4
                
        // field:H57     Nunitunits:s:/A     
        //  possibles: ? Number of entries with same CCDM
        
D 4
        String         Nsys_asText                   = new String(readBfr, OFFSET_TO_NSYS, LENGTH_OF_NSYS);
        System.out.println("Nsys_asText = " + Nsys_asText);
        Integer         Nsys = trimAndValidateInteger(Nsys_asText);
E 4
I 4
//        String         Nsys_asText                   = new String(readBfr, OFFSET_TO_NSYS, LENGTH_OF_NSYS);
D 5
//        System.out.println("Nsys_asText = " + Nsys_asText);
E 5
I 5
//        log("Nsys_asText = " + Nsys_asText);
E 5
//        Integer         Nsys = trimAndValidateInteger(Nsys_asText);
E 4
                
        // field:H58     Nunitunits:s:/A     
        //  possibles: ? Number of components in this entry
        
D 4
        String         Ncomp_asText                  = new String(readBfr, OFFSET_TO_NCOMP, LENGTH_OF_NCOMP);
        System.out.println("Ncomp_asText = " + Ncomp_asText);
        Integer         Ncomp = trimAndValidateInteger(Ncomp_asText);
E 4
I 4
//        String         Ncomp_asText                  = new String(readBfr, OFFSET_TO_NCOMP, LENGTH_OF_NCOMP);
D 5
//        System.out.println("Ncomp_asText = " + Ncomp_asText);
E 5
I 5
//        log("Ncomp_asText = " + Ncomp_asText);
E 5
//        Integer         Ncomp = trimAndValidateInteger(Ncomp_asText);
E 4
                
        // field:H59     Nunitunits:s:/A    
        //  possibles: *[CGOVX] Double/Multiple Systems flag
        
D 4
        String         MultFlag_asText               = new String(readBfr, OFFSET_TO_MULTFLAG, LENGTH_OF_MULTFLAG);
        System.out.println("MultFlag_asText = " + MultFlag_asText);
        Character         MultFlag = trimAndValidateCharacter(MultFlag_asText);
E 4
I 4
//        String         MultFlag_asText               = new String(readBfr, OFFSET_TO_MULTFLAG, LENGTH_OF_MULTFLAG);
D 5
//        System.out.println("MultFlag_asText = " + MultFlag_asText);
E 5
I 5
//        log("MultFlag_asText = " + MultFlag_asText);
E 5
//        Character         MultFlag = trimAndValidateCharacter(MultFlag_asText);
E 4
                
        // field:H60     Nunitunits:s:/A    
        //  possibles: *[PFILS] Astrometric source flag
        
D 4
        String         Source_asText                 = new String(readBfr, OFFSET_TO_SOURCE, LENGTH_OF_SOURCE);
        System.out.println("Source_asText = " + Source_asText);
        Character         Source = trimAndValidateCharacter(Source_asText);
E 4
I 4
//        String         Source_asText                 = new String(readBfr, OFFSET_TO_SOURCE, LENGTH_OF_SOURCE);
D 5
//        System.out.println("Source_asText = " + Source_asText);
E 5
I 5
//        log("Source_asText = " + Source_asText);
E 5
//        Character         Source = trimAndValidateCharacter(Source_asText);
E 4
                
        // field:H61     Nunitunits:s:/A    
        //  possibles: *[ABCDS] Solution quality
        
D 4
        String         Qual_asText                   = new String(readBfr, OFFSET_TO_QUAL, LENGTH_OF_QUAL);
        System.out.println("Qual_asText = " + Qual_asText);
        Character         Qual = trimAndValidateCharacter(Qual_asText);
E 4
I 4
//        String         Qual_asText                   = new String(readBfr, OFFSET_TO_QUAL, LENGTH_OF_QUAL);
D 5
//        System.out.println("Qual_asText = " + Qual_asText);
E 5
I 5
//        log("Qual_asText = " + Qual_asText);
E 5
//        Character         Qual = trimAndValidateCharacter(Qual_asText);
E 4
                
        // field:H62     Nunitunits:s:/A     
        //  possibles: Component identifiers
        
D 4
        String         m_HIP_asText                  = new String(readBfr, OFFSET_TO_M_HIP, LENGTH_OF_M_HIP);
        System.out.println("m_HIP_asText = " + m_HIP_asText);
        String         m_HIP = trimAndValidateString(m_HIP_asText);
E 4
I 4
//        String         m_HIP_asText                  = new String(readBfr, OFFSET_TO_M_HIP, LENGTH_OF_M_HIP);
D 5
//        System.out.println("m_HIP_asText = " + m_HIP_asText);
E 5
I 5
//        log("m_HIP_asText = " + m_HIP_asText);
E 5
//        String         m_HIP = trimAndValidateString(m_HIP_asText);
E 4
                
        // field:H63     deg     unitunits:s:? Position 
        //  possibles: angle between components
        
D 4
        String         theta_asText                  = new String(readBfr, OFFSET_TO_THETA, LENGTH_OF_THETA);
        System.out.println("theta_asText = " + theta_asText);
        Integer         theta = trimAndValidateInteger(theta_asText);
E 4
I 4
//        String         theta_asText                  = new String(readBfr, OFFSET_TO_THETA, LENGTH_OF_THETA);
D 5
//        System.out.println("theta_asText = " + theta_asText);
E 5
I 5
//        log("theta_asText = " + theta_asText);
E 5
//        Integer         theta = trimAndValidateInteger(theta_asText);
E 4
                
        // field:H64     arcse   unitunits:s:? Angular 
        //  possibles: separation between components
        
D 4
        String         rho_asText                    = new String(readBfr, OFFSET_TO_RHO, LENGTH_OF_RHO);
        System.out.println("rho_asText = " + rho_asText);
        Float         rho = trimAndValidateFloat(rho_asText);
E 4
I 4
//        String         rho_asText                    = new String(readBfr, OFFSET_TO_RHO, LENGTH_OF_RHO);
D 5
//        System.out.println("rho_asText = " + rho_asText);
E 5
I 5
//        log("rho_asText = " + rho_asText);
E 5
//        Float         rho = trimAndValidateFloat(rho_asText);
E 4
                
        // field:H65     arcse   unitunits:s:? Standard 
        //  possibles: error on rho
        
D 4
        String         e_rho_asText                  = new String(readBfr, OFFSET_TO_E_RHO, LENGTH_OF_E_RHO);
        System.out.println("e_rho_asText = " + e_rho_asText);
        Float          e_rho = trimAndValidateFloat(e_rho_asText);
E 4
I 4
//        String         e_rho_asText                  = new String(readBfr, OFFSET_TO_E_RHO, LENGTH_OF_E_RHO);
D 5
//        System.out.println("e_rho_asText = " + e_rho_asText);
E 5
I 5
//        log("e_rho_asText = " + e_rho_asText);
E 5
//        Float          e_rho = trimAndValidateFloat(e_rho_asText);
E 4
                
        // field:H66     mag     unitunits:s:? Magnitude 
        //  possibles: difference of components
        
D 4
        String         dHp_asText                    = new String(readBfr, OFFSET_TO_DHP, LENGTH_OF_DHP);
        System.out.println("dHp_asText = " + dHp_asText);
        Float         dHp = trimAndValidateFloat(dHp_asText);
E 4
I 4
//        String         dHp_asText                    = new String(readBfr, OFFSET_TO_DHP, LENGTH_OF_DHP);
D 5
//        System.out.println("dHp_asText = " + dHp_asText);
E 5
I 5
//        log("dHp_asText = " + dHp_asText);
E 5
//        Float         dHp = trimAndValidateFloat(dHp_asText);
E 4
                
        // field:H67     mag     unitunits:s:? Standard 
        //  possibles: error on dHp
        
D 4
        String         e_dHp_asText                  = new String(readBfr, OFFSET_TO_E_DHP, LENGTH_OF_E_DHP);
        System.out.println("e_dHp_asText = " + e_dHp_asText);
        Float         e_dHp = trimAndValidateFloat(e_dHp_asText);
E 4
I 4
//        String         e_dHp_asText                  = new String(readBfr, OFFSET_TO_E_DHP, LENGTH_OF_E_DHP);
D 5
//        System.out.println("e_dHp_asText = " + e_dHp_asText);
E 5
I 5
//        log("e_dHp_asText = " + e_dHp_asText);
E 5
//        Float         e_dHp = trimAndValidateFloat(e_dHp_asText);
E 4
                
        // field:H68     Nunitunits:s:/A     
        //  possibles: [S] Flag indicating a Survey Star
        
D 4
        String         Survey_asText                 = new String(readBfr, OFFSET_TO_SURVEY, LENGTH_OF_SURVEY);
        System.out.println("Survey_asText = " + Survey_asText);
        Character         Survey = trimAndValidateCharacter(Survey_asText);
E 4
I 4
//        String         Survey_asText                 = new String(readBfr, OFFSET_TO_SURVEY, LENGTH_OF_SURVEY);
D 5
//        System.out.println("Survey_asText = " + Survey_asText);
E 5
I 5
//        log("Survey_asText = " + Survey_asText);
E 5
//        Character         Survey = trimAndValidateCharacter(Survey_asText);
E 4
                
        // field:H69     Nunitunits:s:/A    
        //  possibles: *[DG] Identification Chart
        
D 4
        String         Chart_asText                  = new String(readBfr, OFFSET_TO_CHART, LENGTH_OF_CHART);
        System.out.println("Chart_asText = " + Chart_asText);
        Character         Chart = trimAndValidateCharacter(Chart_asText);
E 4
I 4
//        String         Chart_asText                  = new String(readBfr, OFFSET_TO_CHART, LENGTH_OF_CHART);
D 5
//        System.out.println("Chart_asText = " + Chart_asText);
E 5
I 5
//        log("Chart_asText = " + Chart_asText);
E 5
//        Character         Chart = trimAndValidateCharacter(Chart_asText);
E 4
                
        // field:H70     Nunitunits:s:/A    
        //  possibles: *[DGPWXYZ] Existence of notes
        
D 4
        String         Notes_asText                  = new String(readBfr, OFFSET_TO_NOTES, LENGTH_OF_NOTES);
        System.out.println("Notes_asText = " + Notes_asText);
        Character         Notes = trimAndValidateCharacter(Notes_asText);
E 4
I 4
//        String         Notes_asText                  = new String(readBfr, OFFSET_TO_NOTES, LENGTH_OF_NOTES);
D 5
//        System.out.println("Notes_asText = " + Notes_asText);
E 5
I 5
//        log("Notes_asText = " + Notes_asText);
E 5
//        Character         Notes = trimAndValidateCharacter(Notes_asText);
E 4
                
        // field:H71     Nunitunits:s:/A     
        //  possibles: [1/359083]? HD number <III/135>
        
D 4
        String         HD_asText                     = new String(readBfr, OFFSET_TO_HD, LENGTH_OF_HD);
        System.out.println("HD_asText = " + HD_asText);
        Integer         HD = trimAndValidateInteger(HD_asText);
E 4
I 4
//        String         HD_asText                     = new String(readBfr, OFFSET_TO_HD, LENGTH_OF_HD);
D 5
//        System.out.println("HD_asText = " + HD_asText);
E 5
I 5
//        log("HD_asText = " + HD_asText);
E 5
//        Integer         HD = trimAndValidateInteger(HD_asText);
E 4
                
        // field:H72     Nunitunits:s:/A     
        //  possibles: Bonner DM <Integer/119>, <Integer/122>
        
D 4
        String         BD_asText                     = new String(readBfr, OFFSET_TO_BD, LENGTH_OF_BD);
        System.out.println("BD_asText = " + BD_asText);
        String         BD = trimAndValidateString(BD_asText);
E 4
I 4
//        String         BD_asText                     = new String(readBfr, OFFSET_TO_BD, LENGTH_OF_BD);
D 5
//        System.out.println("BD_asText = " + BD_asText);
E 5
I 5
//        log("BD_asText = " + BD_asText);
E 5
//        String         BD = trimAndValidateString(BD_asText);
E 4
                
        // field:H73     Nunitunits:s:/A     
        //  possibles: Cordoba Durchmusterung (DM) <Integer/114>
        
D 4
        String         CoD_asText                    = new String(readBfr, OFFSET_TO_COD, LENGTH_OF_COD);
        System.out.println("CoD_asText = " + CoD_asText);
        String         CoD = trimAndValidateString(CoD_asText);
E 4
I 4
//        String         CoD_asText                    = new String(readBfr, OFFSET_TO_COD, LENGTH_OF_COD);
D 5
//        System.out.println("CoD_asText = " + CoD_asText);
E 5
I 5
//        log("CoD_asText = " + CoD_asText);
E 5
//        String         CoD = trimAndValidateString(CoD_asText);
E 4
                
        // field:H74     Nunitunits:s:/A     
        //  possibles: Cape Photographic DM <Integer/108>
        
D 4
        String         CPD_asText                    = new String(readBfr, OFFSET_TO_CPD, LENGTH_OF_CPD);
        System.out.println("CPD_asText = " + CPD_asText);
        String         CPD = trimAndValidateString(CPD_asText);
E 4
I 4
//        String         CPD_asText                    = new String(readBfr, OFFSET_TO_CPD, LENGTH_OF_CPD);
D 5
//        System.out.println("CPD_asText = " + CPD_asText);
E 5
I 5
//        log("CPD_asText = " + CPD_asText);
E 5
//        String         CPD = trimAndValidateString(CPD_asText);
E 4
                
        // field:H75     mag     unitunits:s:V
        //  possibles: -Integer used for reductions
        
D 4
        String         VI_red_asText                 = new String(readBfr, OFFSET_TO_VI_RED, LENGTH_OF_VI_RED);
        System.out.println("VI_red_asText = " + VI_red_asText);
        Float         VI_red = trimAndValidateFloat(VI_red_asText);
E 4
I 4
//        String         VI_red_asText                 = new String(readBfr, OFFSET_TO_VI_RED, LENGTH_OF_VI_RED);
D 5
//        System.out.println("VI_red_asText = " + VI_red_asText);
E 5
I 5
//        log("VI_red_asText = " + VI_red_asText);
E 5
//        Float         VI_red = trimAndValidateFloat(VI_red_asText);
E 4
                
        // field:H76     Nunitunits:s:/A     
        //  possibles: Spectral type
        
D 4
        String         SpType_asText                 = new String(readBfr, OFFSET_TO_SPTYPE, LENGTH_OF_SPTYPE);
        System.out.println("SpType_asText = " + SpType_asText);
        String         SpType = trimAndValidateString(SpType_asText);
E 4
I 4
//        String         SpType_asText                 = new String(readBfr, OFFSET_TO_SPTYPE, LENGTH_OF_SPTYPE);
D 5
//        System.out.println("SpType_asText = " + SpType_asText);
E 5
I 5
//        log("SpType_asText = " + SpType_asText);
E 5
//        String         SpType = trimAndValidateString(SpType_asText);
E 4
                
        // field:H77     Nunitunits:s:/A    
        //  possibles: *[1234GKSX]? Source of spectral type
        
D 4
        String         r_SpType_asText               = new String(readBfr, OFFSET_TO_R_SPTYPE, LENGTH_OF_R_SPTYPE);
        System.out.println("r_SpType_asText = " + r_SpType_asText.trim());    
        Character         r_SpType = trimAndValidateCharacter(r_SpType_asText);
E 4
I 4
//        String         r_SpType_asText               = new String(readBfr, OFFSET_TO_R_SPTYPE, LENGTH_OF_R_SPTYPE);
D 5
//        System.out.println("r_SpType_asText = " + r_SpType_asText.trim());    
E 5
I 5
//        log("r_SpType_asText = " + r_SpType_asText.trim());    
E 5
//        Character         r_SpType = trimAndValidateCharacter(r_SpType_asText);
E 4
D 5
        
E 5

I 4
D 5
		 printOutConvertedCoords(HIP, RAhms, DEdms, Plx);
E 5
I 5
        // If it has no parallax we can't calculate the coordinates

/*
       if ( (Plx == null) ||( Plx.isNaN() == true) || (Plx.isInfinite() == true) )
       {
 		}
       else
       {
   		 	printOutConvertedCoords(HIP, RAhms, DEdms, Plx);
		}
*/
E 5
E 4
    }

E 3
    public static void main(String[] args) throws LexerCreationException, ParsingException, FileNotFoundException, IOException
    {
D 4
        FileInputStream fileInput = null;
		FileOutputStream fileOutput = null;
E 4
		byte[] readBfr = new byte[RECORDSIZE];

        try
        {
            // Parse the command line arguments

			CommandLineParser parser = new CommandLineParser();

            parser.parse(args);

            // Open the input stream

D 4
            fileInput = new FileInputStream(parser.getInFile());
E 4
I 4
            m_FileInput = new FileInputStream(parser.getInFile());
E 4

            // Open the output stream

D 4
            fileOutput = new FileOutputStream(parser.getOutFile());
E 4
I 4
            m_FileOutput = new FileWriter(parser.getOutFile());
D 5
			int count = 0;
E 5
E 4

D 3
            // Read in the record and construct a

			fileInput.read(readBfr);

            // Now look at the catalog type

			Character c = new Character( (char) readBfr[OFFSET_TOCATALOG]);
            System.out.println(c);

E 3
I 3
D 4
            while (fileInput.read(readBfr) != 0)
E 4
I 4
D 5
            while (m_FileInput.read(readBfr) != 0 && count != 5)
E 5
I 5
            // Set the verbosity flag

			m_Verbose = false;

            if (parser.getVerbose() != null)
            {
                m_Verbose = parser.getVerbose().booleanValue();
            }

			// Get the count

            m_Records = 10;

            int count = 0;

            if (parser.getRecords() != null)
            {
				m_Records = parser.getRecords().intValue();
            }

            while (m_FileInput.read(readBfr) != 0 && count != m_Records)
E 5
E 4
            {
I 5
                String charBfr = new String(readBfr);

E 5
	            // Dump the contents
D 5
	
	            readAndResolve(readBfr);
E 5
I 5
	            m_Fields.populate(charBfr.toCharArray());
E 5
I 4
                count++;
E 4
            }
E 3
        }
        finally
        {
D 4
            if (fileInput != null)
E 4
I 4
            if (m_FileInput != null)
E 4
            {
D 4
	            fileInput.close();
E 4
I 4
	            m_FileInput.close();
E 4
            }

D 4
            if (fileOutput != null)
E 4
I 4
            if (m_FileOutput != null)
E 4
			{
D 4
	            fileOutput.close();
E 4
I 4
	            m_FileOutput.close();
E 4
            }
        }
    }
I 5

    private static class CommandLineParser extends IOFilterParser
   	{
   	    public CommandLineParser() throws IllegalArgumentException, LexerCreationException
   	    {
   	        super();
   	
   	        this.register(new Parser.ArgSemantic("verbose", "v", "Verbose reporting", "java.lang.Boolean", false));
   	        this.register(new Parser.ArgSemantic("records", "rec", "Records to be processed", "java.lang.Integer", false));
   	    }

   	    public Boolean getVerbose()
   	    {
   	        return((Boolean) getParsedArgument("verbose"));
   	    }

   	    public Integer getRecords()
   	    {
   	        return((Integer) getParsedArgument("records"));
   	    }
   	}
    
E 5
}
E 2
I 1
E 1
