/* Generated by Together */

package mushin.frp.astronomy.catalog_readers;

import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.FileNotFoundException;
import java.io.IOException;

import java.util.StringTokenizer;
import java.util.Hashtable;
import java.util.Collection;
import java.util.Iterator;

public class FieldDefinitionTable
{
    static int OFFSET_TO_CATALOG    = 0;
    static int LENGTH_OF_CATALOG    =   1;
    static int OFFSET_TO_HIP        = 8;
    static int LENGTH_OF_HIP        = 6;
    static int OFFSET_TO_PROXY      =  15;
    static int LENGTH_OF_PROXY      =   1;
    static int OFFSET_TO_RAHMS      =  17;
    static int LENGTH_OF_RAHMS      =  11;
    static int OFFSET_TO_DEDMS      =  29;
    static int LENGTH_OF_DEDMS      =   11;
    static int OFFSET_TO_VMAG       =  41;
    static int LENGTH_OF_VMAG       =   5;
    static int OFFSET_TO_VARFLAG    =  47;
    static int LENGTH_OF_VARFLAG    =   1;
    static int OFFSET_TO_R_VMAG     =  49;
    static int LENGTH_OF_R_VMAG     =   1;
    static int OFFSET_TO_RADEG      =  51;
    static int LENGTH_OF_RADEG      =   12;
    static int OFFSET_TO_DEDEG      =  64;
    static int LENGTH_OF_DEDEG      =   12;
    static int OFFSET_TO_ASTROREF   =  77;
    static int LENGTH_OF_ASTROREF   =   1;
    static int OFFSET_TO_PLX        =  79;
    static int LENGTH_OF_PLX        =   7;
    static int OFFSET_TO_PMRA       =  87;
    static int LENGTH_OF_PMRA       =   8;
    static int OFFSET_TO_PMDE       =  96;
    static int LENGTH_OF_PMDE       =   8;
    static int OFFSET_TO_E_RADEG    = 105;
    static int LENGTH_OF_E_RADEG    =   6;
    static int OFFSET_TO_E_DEDEG    = 112;
    static int LENGTH_OF_E_DEDEG    =   6;
    static int OFFSET_TO_E_PLX      = 119;
    static int LENGTH_OF_E_PLX      =   6;
    static int OFFSET_TO_E_PMRA     = 126;
    static int LENGTH_OF_E_PMRA     =   6;
    static int OFFSET_TO_E_PMDE     = 133;
    static int LENGTH_OF_E_PMDE     =   6;
    static int OFFSET_TO_DE_RA      = 140;
    static int LENGTH_OF_DE_RA      =   5;
    static int OFFSET_TO_PLX_RA     = 146;
    static int LENGTH_OF_PLX_RA     =   5;
    static int OFFSET_TO_PLX_DE     = 152;
    static int LENGTH_OF_PLX_DE     =   5;
    static int OFFSET_TO_PMRA_RA    = 158;
    static int LENGTH_OF_PMRA_RA    =   5;
    static int OFFSET_TO_PMRA_DE    = 164;
    static int LENGTH_OF_PMRA_DE    =   5;
    static int OFFSET_TO_PMRA_PLX   = 170;
    static int LENGTH_OF_PMRA_PLX   =   5;
    static int OFFSET_TO_PMDE_RA    = 176;
    static int LENGTH_OF_PMDE_RA    =   5;
    static int OFFSET_TO_PMDE_DE    = 182;
    static int LENGTH_OF_PMDE_DE    =   5;
    static int OFFSET_TO_PMDE_PLX   = 188;
    static int LENGTH_OF_PMDE_PLX   =   5;
    static int OFFSET_TO_PMDE_PMRA  = 194;
    static int LENGTH_OF_PMDE_PMRA  =   5;
    static int OFFSET_TO_F1         = 200;
    static int LENGTH_OF_F1         =   3;
    static int OFFSET_TO_F2         = 204;
    static int LENGTH_OF_F2         =   5;
    static int OFFSET_TO_BTMAG      = 217;
    static int LENGTH_OF_BTMAG      =   6;
    static int OFFSET_TO_E_BTMAG    = 224;
    static int LENGTH_OF_E_BTMAG    =   5;
    static int OFFSET_TO_VTMAG      = 230;
    static int LENGTH_OF_VTMAG      =   6;
    static int OFFSET_TO_E_VTMAG    = 237;
    static int LENGTH_OF_E_VTMAG    =   5;
    static int OFFSET_TO_M_BTMAG    = 243;
    static int LENGTH_OF_M_BTMAG    =   1;
    static int OFFSET_TO_B_V        = 245;
    static int LENGTH_OF_B_V        =   6;
    static int OFFSET_TO_E_B_V      = 252;
    static int LENGTH_OF_E_B_V      =   5;
    static int OFFSET_TO_R_B_V      = 258;
    static int LENGTH_OF_R_B_V      =   1;
    static int OFFSET_TO_V_I        = 260;
    static int LENGTH_OF_V_I        =   4;
    static int OFFSET_TO_E_V_I      = 265;
    static int LENGTH_OF_E_V_I      =   4;
    static int OFFSET_TO_R_V_I      = 270;
    static int LENGTH_OF_R_V_I      =   1;
    static int OFFSET_TO_COMBMAG    = 272;
    static int LENGTH_OF_COMBMAG    =   1;
    static int OFFSET_TO_HPMAG      = 274;
    static int LENGTH_OF_HPMAG      =   7;
    static int OFFSET_TO_E_HPMAG    = 282;
    static int LENGTH_OF_E_HPMAG    =   6;
    static int OFFSET_TO_HPSCAT     = 289;
    static int LENGTH_OF_HPSCAT     =   5;
    static int OFFSET_TO_O_HPMAG    = 295;
    static int LENGTH_OF_O_HPMAG    =   3;
    static int OFFSET_TO_M_HPMAG    = 299;
    static int LENGTH_OF_M_HPMAG    =   1;
    static int OFFSET_TO_HPMAX      = 301;
    static int LENGTH_OF_HPMAX      =   5;
    static int OFFSET_TO_HPMIN      = 307;
    static int LENGTH_OF_HPMIN      =   5;
    static int OFFSET_TO_PERIOD     = 313;
    static int LENGTH_OF_PERIOD     =   7;
    static int OFFSET_TO_HVARTYPE   = 321;
    static int LENGTH_OF_HVARTYPE   =   1;
    static int OFFSET_TO_MOREVAR    = 323;
    static int LENGTH_OF_MOREVAR    =   1;
    static int OFFSET_TO_MOREPHOTO  = 325;
    static int LENGTH_OF_MOREPHOTO  =   1;
    static int OFFSET_TO_CCDM       = 327;
    static int LENGTH_OF_CCDM       =   10;
    static int OFFSET_TO_N_CCDM     = 338;
    static int LENGTH_OF_N_CCDM     =   1;
    static int OFFSET_TO_NSYS       = 340;
    static int LENGTH_OF_NSYS       =   2;
    static int OFFSET_TO_NCOMP      = 343;
    static int LENGTH_OF_NCOMP      =   2;
    static int OFFSET_TO_MULTFLAG   = 346;
    static int LENGTH_OF_MULTFLAG   =   1;
    static int OFFSET_TO_SOURCE     = 348;
    static int LENGTH_OF_SOURCE     =   1;
    static int OFFSET_TO_QUAL       = 350;
    static int LENGTH_OF_QUAL       =   1;
    static int OFFSET_TO_M_HIP      = 352;
    static int LENGTH_OF_M_HIP      =   2;
    static int OFFSET_TO_THETA      = 355;
    static int LENGTH_OF_THETA      =   3;
    static int OFFSET_TO_RHO        = 359;
    static int LENGTH_OF_RHO        =   7;
    static int OFFSET_TO_E_RHO      = 367;
    static int LENGTH_OF_E_RHO      =   5;
    static int OFFSET_TO_DHP        = 373;
    static int LENGTH_OF_DHP        =   5;
    static int OFFSET_TO_E_DHP      = 379;
    static int LENGTH_OF_E_DHP      =   4;
    static int OFFSET_TO_SURVEY     = 384;
    static int LENGTH_OF_SURVEY     =   1;
    static int OFFSET_TO_CHART      = 386;
    static int LENGTH_OF_CHART      =   1;
    static int OFFSET_TO_NOTES      = 388;
    static int LENGTH_OF_NOTES      =   1;
    static int OFFSET_TO_HD         = 390;
    static int LENGTH_OF_HD         =   6;
    static int OFFSET_TO_BD         = 397;
    static int LENGTH_OF_BD         =   10;
    static int OFFSET_TO_COD        = 408;
    static int LENGTH_OF_COD        =   10;
    static int OFFSET_TO_CPD        = 419;
    static int LENGTH_OF_CPD        =   10;
    static int OFFSET_TO_VI_RED     = 430;
    static int LENGTH_OF_VI_RED     =   4;
    static int OFFSET_TO_SPTYPE     = 435;
    static int LENGTH_OF_SPTYPE     =   12;
    static int OFFSET_TO_R_SPTYPE   = 448;
    static int LENGTH_OF_R_SPTYPE   =   1;

    private Hashtable   m_Fields;

    public class FieldDefinitionAndInstance
    {
        public String   Label;        
        public String   Name;
        public Class    Type;
        public int      Offset;
        public int      Length;
        public boolean  Optional;
        public boolean  CriticalToRead; // Implies it is needed by the realculations
        public String   Description;
        public String   Units;
        public Object 	Instance;

		public FieldDefinitionAndInstance(String Label, String Name, Class Type, int Offset, int Length, boolean Optional, boolean CriticalToRead, String Description, String Units)
        {
            this.Label = Label;
            this.Name = Name;
            this.Type = Type;
            this.Offset = Offset;
            this.Length = Length;
            this.Optional = Optional;
            this.CriticalToRead = CriticalToRead;
            this.Description = Description;
            this.Units = Units;
    	}
    }

    static public FieldDefinitionTable getCanonicalTable()
    {
        return new FieldDefinitionTable();
    }

    public boolean populate(char[] bfr)
    {
        // Iterate and populate...

        Collection collxn = m_Fields.values();
        Iterator iter = collxn.iterator();

		FieldDefinitionAndInstance	fieldDef = null;
        StringBuffer				fieldBfr = new StringBuffer();
        String                      fieldAsString = null;
        
    	while (iter.hasNext() )
        {
            // get each entry from the table

			fieldDef = (FieldDefinitionAndInstance) iter.next();

            // Read in the element form the bfr as per the table.

            fieldBfr.setLength(0);
            fieldBfr.append(bfr, fieldDef.Offset, fieldDef.Length);
            
            // Check that the  string is  non-empty
            // and change the contents of the instance object

            System.out.println(fieldDef.Name + ":" + fieldBfr);
            
            
            
        }
        
        return true;
    }

    public FieldDefinitionTable()
    {
        m_Fields = new Hashtable();
     
        m_Fields.put("Catalog", new FieldDefinitionAndInstance("H0","Catalog",Character.class,OFFSET_TO_CATALOG,LENGTH_OF_CATALOG,false,false,"[H] Catalogue (H=Hipparcos)              ","NA"));
        m_Fields.put("HIP",new FieldDefinitionAndInstance("H1","HIP",Integer.class,OFFSET_TO_HIP,LENGTH_OF_HIP ,false,false,"Identifier (HIP number)                  ","NA"));
        m_Fields.put("Proxy",new FieldDefinitionAndInstance("H2","Proxy",Character.class,OFFSET_TO_PROXY,LENGTH_OF_PROXY ,false,false,"[HT] Proximity flag                      ","NA"));
        m_Fields.put("RAhms",new FieldDefinitionAndInstance("H3","RAhms",String.class,OFFSET_TO_RAHMS ,LENGTH_OF_RAHMS,false,false,"Right ascension in h m s, ICRS (J1991.25)","NA"));
        m_Fields.put("DEdms",new FieldDefinitionAndInstance("H4","DEdms",String.class,OFFSET_TO_DEDMS ,LENGTH_OF_DEDMS,false,false,"Declination in deg m s, ICRS (J1991.25)  ","NA"));
        m_Fields.put("Vmag",new FieldDefinitionAndInstance("H5","Vmag",Float.class,OFFSET_TO_VMAG ,LENGTH_OF_VMAG,true ,false,"Magnitude in Johnson V                   ","mag"));
        m_Fields.put("VarFlag",new FieldDefinitionAndInstance("H6","VarFlag",Integer.class,OFFSET_TO_VARFLAG ,LENGTH_OF_VARFLAG,false,false,"[1,3]? Coarse variability flag           ","NA"));
        m_Fields.put("r_Vmag",new FieldDefinitionAndInstance("H7","r_Vmag",Character.class,OFFSET_TO_R_VMAG ,LENGTH_OF_R_VMAG,false,false,"[GHT] Source of magnitude                ","NA"));
        m_Fields.put("RAdeg",new FieldDefinitionAndInstance("H8","RAdeg",Float.class,OFFSET_TO_RADEG ,LENGTH_OF_RADEG,true ,false,"alpha, degrees (ICRS, Epoch=J1991.25)    ","deg"));
        m_Fields.put("DEdeg",new FieldDefinitionAndInstance("H9","DEdeg",Float.class,OFFSET_TO_DEDEG ,LENGTH_OF_DEDEG,true ,false,"delta, degrees (ICRS, Epoch=J1991.25)    ","deg"));
        m_Fields.put("AstroRef",new FieldDefinitionAndInstance("H10","AstroRef",Character.class,OFFSET_TO_ASTROREF ,LENGTH_OF_ASTROREF,false,false,"[*+A-Z] Reference flag for astrometry    ","NA"));
        m_Fields.put("Plx",new FieldDefinitionAndInstance("H11","Plx",Float.class,OFFSET_TO_PLX ,LENGTH_OF_PLX,true ,false,"Trigonometric parallax                   ","mas"));
        m_Fields.put("pmRA",new FieldDefinitionAndInstance("H12","pmRA",Float.class,OFFSET_TO_PMRA ,LENGTH_OF_PMRA,true ,false,"Proper motion mu_alpha.cos(delta), ICRS  ","mas/yr"));
        m_Fields.put("pmDE",new FieldDefinitionAndInstance("H13","pmDE",Float.class,OFFSET_TO_PMDE ,LENGTH_OF_PMDE,true ,false,"Proper motion mu_delta, ICRS             ","mas/yr"));
        m_Fields.put("e_RAdeg",new FieldDefinitionAndInstance("H14","e_RAdeg",Float.class,OFFSET_TO_E_RADEG ,LENGTH_OF_E_RADEG,true ,false,"Standard error in RA*cos(DEdeg)          ","mas"));
        m_Fields.put("e_DEdeg",new FieldDefinitionAndInstance("H15","e_DEdeg",Float.class,OFFSET_TO_E_DEDEG ,LENGTH_OF_E_DEDEG,true ,false,"Standard error in DE                     ","mas"));
        m_Fields.put("e_Plx",new FieldDefinitionAndInstance("H16","e_Plx",Float.class,OFFSET_TO_E_PLX ,LENGTH_OF_E_PLX,true ,false,"Standard error in Plx                    ","mas"));
        m_Fields.put("e_pmRA",new FieldDefinitionAndInstance("H17","e_pmRA",Float.class,OFFSET_TO_E_PMRA ,LENGTH_OF_E_PMRA,true ,false,"Standard error in pmRA                   ","mas/yr"));
        m_Fields.put("e_pmDE",new FieldDefinitionAndInstance("H18","e_pmDE",Float.class,OFFSET_TO_E_PMDE ,LENGTH_OF_E_PMDE,true ,false,"Standard error in pmDE                   ","mas/yr"));
        m_Fields.put("DE_RA",new FieldDefinitionAndInstance("H19","DE_RA",Float.class,OFFSET_TO_DE_RA ,LENGTH_OF_DE_RA,false,false,"[-1/1]? Correlation, DE/RA*cos(delta)    ","NA"));
        m_Fields.put("Plx_RA",new FieldDefinitionAndInstance("H20","Plx_RA",Float.class,OFFSET_TO_PLX_RA ,LENGTH_OF_PLX_RA,false,false,"[-1/1]? Correlation, Plx/RA*cos(delta)   ","NA"));
        m_Fields.put("Plx_DE",new FieldDefinitionAndInstance("H21","Plx_DE",Float.class,OFFSET_TO_PLX_DE ,LENGTH_OF_PLX_DE,false,false,"[-1/1]? Correlation, Plx/DE              ","NA"));
        m_Fields.put("pmRA_RA",new FieldDefinitionAndInstance("H22","pmRA_RA",Float.class,OFFSET_TO_PMRA_RA ,LENGTH_OF_PMRA_RA,false,false,"[-1/1]? Correlation, pmRA/RA*cos(delta)  ","NA"));
        m_Fields.put("pmRA_DE",new FieldDefinitionAndInstance("H23","pmRA_DE",Float.class,OFFSET_TO_PMRA_DE ,LENGTH_OF_PMRA_DE,false,false,"[-1/1]? Correlation, pmRA/DE             ","NA"));
        m_Fields.put("pmRA_Plx",new FieldDefinitionAndInstance("H24","pmRA_Plx",Float.class,OFFSET_TO_PMRA_PLX ,LENGTH_OF_PMRA_PLX,false,false,"[-1/1]? Correlation, pmRA/Plx            ","NA"));
        m_Fields.put("pmDE_RA",new FieldDefinitionAndInstance("H25","pmDE_RA",Float.class,OFFSET_TO_PMDE_RA ,LENGTH_OF_PMDE_RA,false,false,"[-1/1]? Correlation, pmDE/RA*cos(delta)  ","NA"));
        m_Fields.put("pmDE_DE",new FieldDefinitionAndInstance("H26","pmDE_DE",Float.class,OFFSET_TO_PMDE_DE ,LENGTH_OF_PMDE_DE,false,false,"[-1/1]? Correlation, pmDE/DE             ","NA"));
        m_Fields.put("pmDE_Plx",new FieldDefinitionAndInstance("H27","pmDE_Plx",Float.class,OFFSET_TO_PMDE_PLX ,LENGTH_OF_PMDE_PLX,false,false,"[-1/1]? Correlation, pmDE/Plx            ","NA"));
        m_Fields.put("pmDE_pmRA",new FieldDefinitionAndInstance("H28","pmDE_pmRA",Float.class,OFFSET_TO_PMDE_PMRA ,LENGTH_OF_PMDE_PMRA,false,false,"[-1/1]? Correlation, pmDE/pmRA           ","NA"));
        m_Fields.put("F1",new FieldDefinitionAndInstance("H29","F1",Integer.class,OFFSET_TO_F1 ,LENGTH_OF_F1,true ,false,"Percentage of rejected data              ","%"));
        m_Fields.put("F2",new FieldDefinitionAndInstance("H30","F2",Float.class,OFFSET_TO_F2 ,LENGTH_OF_F2,true ,false,"Goodness-of-fit parameter                ","NA"));
        m_Fields.put("BTmag",new FieldDefinitionAndInstance("H32","BTmag",Float.class,OFFSET_TO_BTMAG ,LENGTH_OF_BTMAG,true ,false,"Mean BT magnitude                        ","mag"));
        m_Fields.put("e_BTmag",new FieldDefinitionAndInstance("H33","e_BTmag",Float.class,OFFSET_TO_E_BTMAG ,LENGTH_OF_E_BTMAG,true ,false,"Standard error on BTmag                  ","mag"));
        m_Fields.put("VTmag",new FieldDefinitionAndInstance("H34","VTmag",Float.class,OFFSET_TO_VTMAG ,LENGTH_OF_VTMAG,true ,false,"Mean VT magnitude                        ","mag"));
        m_Fields.put("e_VTmag",new FieldDefinitionAndInstance("H35","e_VTmag",Float.class,OFFSET_TO_E_VTMAG ,LENGTH_OF_E_VTMAG,true ,false,"Standard error on VTmag                  ","mag"));
        m_Fields.put("m_BTmag",new FieldDefinitionAndInstance("H36","m_BTmag",Character.class,OFFSET_TO_M_BTMAG ,LENGTH_OF_M_BTMAG,false,false,"[A-Z*-] Reference flag for BT and VTmag  ","NA"));
        m_Fields.put("B_V",new FieldDefinitionAndInstance("H37","B_V",Float.class,OFFSET_TO_B_V ,LENGTH_OF_B_V,true ,false,"Johnson B-V colour                       ","mag"));
        m_Fields.put("e_B_V",new FieldDefinitionAndInstance("H38","e_B_V",Float.class,OFFSET_TO_E_B_V ,LENGTH_OF_E_B_V,true ,false,"Standard error on B-V                    ","mag"));
        m_Fields.put("r_B_V",new FieldDefinitionAndInstance("H39","r_B_V",Character.class,OFFSET_TO_R_B_V ,LENGTH_OF_R_B_V,false,false,"[GT] Source of B-V from Ground or Tycho  ","NA"));
        m_Fields.put("V_I",new FieldDefinitionAndInstance("H40","V_I",Float.class,OFFSET_TO_V_I ,LENGTH_OF_V_I,true ,false,"Colour index in Cousins system           ","mag"));
        m_Fields.put("e_V_I",new FieldDefinitionAndInstance("H41","e_V_I",Float.class,OFFSET_TO_E_V_I ,LENGTH_OF_E_V_I,true ,false,"Standard error on V-I                    ","mag"));
        m_Fields.put("r_V_I",new FieldDefinitionAndInstance("H42","r_V_I",Character.class,OFFSET_TO_R_V_I ,LENGTH_OF_R_V_I,false,false,"[A-T] Source of V-I                      ","NA"));
        m_Fields.put("CombMag",new FieldDefinitionAndInstance("H43","CombMag",Character.class,OFFSET_TO_COMBMAG ,LENGTH_OF_COMBMAG,false,false,"[*] Flag for combined Vmag, B-V, V-I     ","NA"));
        m_Fields.put("Hpmag",new FieldDefinitionAndInstance("H44","Hpmag",Float.class,OFFSET_TO_HPMAG ,LENGTH_OF_HPMAG,true ,false,"Median magnitude in Hipparcos system     ","mag"));
        m_Fields.put("e_Hpmag",new FieldDefinitionAndInstance("H45","e_Hpmag",Float.class,OFFSET_TO_E_HPMAG ,LENGTH_OF_E_HPMAG,true ,false,"Standard error on Hpmag                  ","mag"));
        m_Fields.put("Hpscat",new FieldDefinitionAndInstance("H46","Hpscat",Float.class,OFFSET_TO_HPSCAT ,LENGTH_OF_HPSCAT,true ,false,"Scatter on Hpmag                         ","mag"));
        m_Fields.put("o_Hpmag",new FieldDefinitionAndInstance("H47","o_Hpmag",Integer.class,OFFSET_TO_O_HPMAG ,LENGTH_OF_O_HPMAG,true ,false,"Number of observations for Hpmag         ","NA"));
        m_Fields.put("m_Hpmag",new FieldDefinitionAndInstance("H48","m_Hpmag",Character.class,OFFSET_TO_M_HPMAG ,LENGTH_OF_M_HPMAG,false,false,"[A-Z*-] Reference flag for Hpmag         ","NA"));
        m_Fields.put("Hpmax",new FieldDefinitionAndInstance("H49","Hpmax",Float.class,OFFSET_TO_HPMAX ,LENGTH_OF_HPMAX,true ,false,"Hpmag at maximum (5th percentile)        ","mag"));
        m_Fields.put("HPmin",new FieldDefinitionAndInstance("H50","HPmin",Float.class,OFFSET_TO_HPMIN ,LENGTH_OF_HPMIN,true ,false,"Hpmag at minimum (95th percentile)       ","mag"));
        m_Fields.put("Period",new FieldDefinitionAndInstance("H51","Period",Float.class,OFFSET_TO_PERIOD ,LENGTH_OF_PERIOD,true ,false,"Variability period (days)                ","d"));
        m_Fields.put("HvarType",new FieldDefinitionAndInstance("H52","HvarType",Character.class,OFFSET_TO_HVARTYPE ,LENGTH_OF_HVARTYPE,false,false,"[CDMPRU]? variability type               ","NA"));
        m_Fields.put("moreVar",new FieldDefinitionAndInstance("H53","moreVar",Character.class,OFFSET_TO_MOREVAR ,LENGTH_OF_MOREVAR,false,false,"[12] Additional data about variability   ","NA"));
        m_Fields.put("morePhoto",new FieldDefinitionAndInstance("H54","morePhoto",Character.class,OFFSET_TO_MOREPHOTO ,LENGTH_OF_MOREPHOTO,false,false,"[ABC] Light curve Annex                  ","NA"));
        m_Fields.put("CCDM",new FieldDefinitionAndInstance("H55","CCDM",String.class,OFFSET_TO_CCDM ,LENGTH_OF_CCDM,false,false,"CCDM identifier                          ","NA"));
        m_Fields.put("n_CCDM",new FieldDefinitionAndInstance("H56","n_CCDM",Character.class,OFFSET_TO_N_CCDM ,LENGTH_OF_N_CCDM,false,false,"[HIM] Historical status flag             ","NA"));
        m_Fields.put("Nsys",new FieldDefinitionAndInstance("H57","Nsys",Integer.class,OFFSET_TO_NSYS ,LENGTH_OF_NSYS,true ,false,"Number of entries with same CCDM         ","NA"));
        m_Fields.put("Ncomp",new FieldDefinitionAndInstance("H58","Ncomp",Integer.class,OFFSET_TO_NCOMP ,LENGTH_OF_NCOMP,true ,false,"Number of components in this entry       ","NA"));
        m_Fields.put("MultFlag",new FieldDefinitionAndInstance("H59","MultFlag",Character.class,OFFSET_TO_MULTFLAG ,LENGTH_OF_MULTFLAG,false,false,"[CGOVX] Double/Multiple Systems flag     ","NA"));
        m_Fields.put("Source",new FieldDefinitionAndInstance("H60","Source",Character.class,OFFSET_TO_SOURCE ,LENGTH_OF_SOURCE,false,false,"[PFILS] Astrometric source flag          ","NA"));
        m_Fields.put("Qual",new FieldDefinitionAndInstance("H61","Qual",Character.class,OFFSET_TO_QUAL ,LENGTH_OF_QUAL,false,false,"[ABCDS] Solution quality                 ","NA"));
        m_Fields.put("m_HIP",new FieldDefinitionAndInstance("H62","m_HIP",String.class,OFFSET_TO_M_HIP ,LENGTH_OF_M_HIP,false,false,"Component identifiers                    ","NA"));
        m_Fields.put("theta",new FieldDefinitionAndInstance("H63","theta",Integer.class,OFFSET_TO_THETA ,LENGTH_OF_THETA,true ,false,"Position angle between components        ","deg"));
        m_Fields.put("rho",new FieldDefinitionAndInstance("H64","rho",Float.class,OFFSET_TO_RHO ,LENGTH_OF_RHO,true ,false,"Angular separation between components    ","arcsec"));
        m_Fields.put("e_rho",new FieldDefinitionAndInstance("H65","e_rho",Float.class,OFFSET_TO_E_RHO ,LENGTH_OF_E_RHO,true ,false,"Standard error on rho                    ","arcsec"));
        m_Fields.put("dHp",new FieldDefinitionAndInstance("H66","dHp",Float.class,OFFSET_TO_DHP ,LENGTH_OF_DHP,true ,false,"Magnitude difference of components       ","mag"));
        m_Fields.put("e_dHp",new FieldDefinitionAndInstance("H67","e_dHp",Float.class,OFFSET_TO_E_DHP ,LENGTH_OF_E_DHP,true ,false,"Standard error on dHp                    ","mag"));
        m_Fields.put("Survey",new FieldDefinitionAndInstance("H68","Survey",Character.class,OFFSET_TO_SURVEY ,LENGTH_OF_SURVEY,false,false,"[S] Flag indicating a Survey Star        ","NA"));
        m_Fields.put("Chart",new FieldDefinitionAndInstance("H69","Chart",Character.class,OFFSET_TO_CHART ,LENGTH_OF_CHART,false,false,"[DG] Identification Chart                ","NA"));
        m_Fields.put("Notes",new FieldDefinitionAndInstance("H70","Notes",Character.class,OFFSET_TO_NOTES ,LENGTH_OF_NOTES,false,false,"[DGPWXYZ] Existence of notes             ","NA"));
        m_Fields.put("HD",new FieldDefinitionAndInstance("H71","HD",Integer.class,OFFSET_TO_HD ,LENGTH_OF_HD,false,false,"[1/359083]? HD number <III/135>          ","NA"));
        m_Fields.put("BD",new FieldDefinitionAndInstance("H72","BD",String.class,OFFSET_TO_BD ,LENGTH_OF_BD,false,false,"Bonner DM <I/119>, <I/122>               ","NA"));
        m_Fields.put("CoD",new FieldDefinitionAndInstance("H73","CoD",String.class,OFFSET_TO_COD ,LENGTH_OF_COD,false,false,"Cordoba Durchmusterung (DM) <I/114>      ","NA"));
        m_Fields.put("CPD",new FieldDefinitionAndInstance("H74","CPD",String.class,OFFSET_TO_CPD ,LENGTH_OF_CPD,false,false,"Cape Photographic DM <I/108>             ","NA"));
        m_Fields.put("V_I_red",new FieldDefinitionAndInstance("H75","V_I_red",Float.class,OFFSET_TO_VI_RED ,LENGTH_OF_VI_RED,false,false,"V-I used for reductions                  ","mag"));
        m_Fields.put("SpType",new FieldDefinitionAndInstance("H76","SpType",String.class,OFFSET_TO_SPTYPE ,LENGTH_OF_SPTYPE,false,false,"Spectral type                            ","NA"));
        m_Fields.put("r_SpType",new FieldDefinitionAndInstance("H77","r_SpType",Character.class,OFFSET_TO_R_SPTYPE ,LENGTH_OF_R_SPTYPE,true ,false,"[1234GKSX]?source of spectral type       ","NA"));
    }            
}
