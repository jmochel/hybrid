/* Generated by Together */

package mushin.frp.astronomy.catalog_readers;

import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.FileNotFoundException;
import java.io.IOException;

import java.util.StringTokenizer;
import java.util.Hashtable;

import mushin.util.commandline.Parser;
import mushin.util.commandline.IOFilterParser;
import mushin.util.commandline.LexerCreationException;
import mushin.util.commandline.ParsingException;

public class HipparcosReader
{
	static int RECORDSIZE = 451;

    private static FileInputStream m_FileInput = null;
	private static FileWriter m_FileOutput = null;
	private static FileWriter m_PltFileOutput = null;

    private static boolean  m_Verbose;
    private static int 		m_Records;
    private static int 		m_RecordsProcessed;

    static FieldDefinitionTable       m_Fields;
    
    static
    {
        try
        {
            m_Fields = FieldDefinitionTable.getCanonicalTable();
        }
        catch (RuntimeException error)
        {
        }
    }    

    private static void log(String msg)
    {
      if ( m_Verbose == true )
      {
          System.out.println("record(" + m_RecordsProcessed + ") " + msg);
      }
    }


    private static void printOutConvertedCoords(Integer HIP, String RA, String DE, Float Parallax) throws java.io.IOException
    {
        if (HIP == null )
        {
            throw new IllegalArgumentException("record(" + m_RecordsProcessed + ") " +"HIP was null");
        }

        if (RA == null )
        {
            throw new IllegalArgumentException("record(" + m_RecordsProcessed + ") " +"RA was null");
        }

        if (DE == null )
        {
            throw new IllegalArgumentException("record(" + m_RecordsProcessed + ") " +"DE was null");
        }

        if (Parallax == null )
        {
            throw new IllegalArgumentException("record(" + m_RecordsProcessed + ") " +"Parallax was null");
        }

		// Tokenize the RA and DE

        StringTokenizer RATokens = new StringTokenizer(RA," ", false);

        //log("Tokens = " + RATokens.countTokens());

        Double ra_hours = new Double(RATokens.nextToken());
        Double ra_minutes = new Double(RATokens.nextToken());
        Double ra_secs = new Double(RATokens.nextToken());


        StringTokenizer DETokens = new StringTokenizer(RA," ", false);

        //log("Tokens = " + DETokens.countTokens());

        Double de_deg = new Double(DETokens.nextToken());
        Double de_minutes = new Double(DETokens.nextToken());
        Double de_secs = new Double(DETokens.nextToken());

        // Get the distance in Parsecs

        double distance_in_parsecs = 1000 / Parallax.doubleValue();

        // Get the distance in Light Years

        double distance_in_lightyears = 3.26 * distance_in_parsecs;

        // Now calculate the rho, phi, theta

        double phi = (ra_hours.doubleValue() * 15) + (ra_minutes.doubleValue() * 0.25) + (ra_secs.doubleValue() * 0.0041666);

        //log("phi = " + phi );

		double sign = 1.0;

        if ( Math.abs(de_deg.doubleValue()) != de_deg.doubleValue())
        {
            sign = -1.0;
        }

        double theta = ( Math.abs(de_deg.doubleValue()) + (ra_minutes.doubleValue()/60) + (ra_secs.doubleValue()/3600)) * sign;

        //log("theta = " + theta );

        double rho = distance_in_lightyears;

        //log("rho = " + rho );

		// Claculate th ecartesian coords

        double rvect = rho * Math.cos(theta);

        double x = rvect * Math.cos(phi);
        double y = rvect * Math.sin(phi);
		double z = rvect * Math.sin(theta);

        // Do it in galatic

        double x_galatic = -(0.0550*x) - (0.8734*y) - (0.4839*z);
        double y_galatic = (0.4940*x) - (0.4449*y) + (0.7470*z);
		double z_galatic = -(0.8677*x) - (0.1979*y) + (0.4560*z);

        m_FileOutput.write(x_galatic + "    " + y_galatic + "    " + z_galatic + "\n");
    }

    private static void readAndResolve(char[] readBfr) throws java.io.IOException
    {
	    m_RecordsProcessed++;

        //  field:H0     units:N/A     
        //  possibles: [H] Catalogue (H=Hipparcos)
        
//        String         Catalog_asText                = new String(readBfr, OFFSET_TO_CATALOG, LENGTH_OF_CATALOG);
//        log("Catalog_asText = " + Catalog_asText);
//        Character         Catalog = trimAndValidateCharacter(Catalog_asText);
        
        //  field:H1     Nunitunits:s:/A     
        //  possibles: Identifier (HIP number)
        
//        String         HIP_asText                    = new String(readBfr, OFFSET_TO_HIP, LENGTH_OF_HIP);
//        log("HIP_asText = " + HIP_asText);
//        Integer         HIP = trimAndValidateInteger(HIP_asText);
                
        //  field:H2     Nunitunits:s:/A    
        //  possibles: *[HT] Proximity flag
        
//        String         Proxy_asText                  = new String(readBfr, OFFSET_TO_PROXY, LENGTH_OF_PROXY);
//        log("Proxy_asText = " + Proxy_asText);
//        Character         Proxy = trimAndValidateCharacter(Proxy_asText);
                
        //  field:H3     Nunitunits:s:/A     
        //  possibles: Right ascension in h m s, ICRS (J1991.25)
        
//        String         RAhms_asText                  = new String(readBfr, OFFSET_TO_RAHMS, LENGTH_OF_RAHMS);
//        log("RAhms_asText = " + RAhms_asText);
//        String         RAhms = trimAndValidateString(RAhms_asText);
                
        //  field:H4     Nunitunits:s:/A     
        //  possibles: Declination in deg ' ", ICRS (J1991.25)
        
//        String         DEdms_asText                  = new String(readBfr, OFFSET_TO_DEDMS, LENGTH_OF_DEDMS);
//        log("DEdms_asText = " + DEdms_asText);
//        String         DEdms = trimAndValidateString(DEdms_asText);
                
        //  field:H5     mag     unitunits:s:? Magnitude 
        //  possibles: in Johnson V
        
//        String         Vmag_asText                   = new String(readBfr, OFFSET_TO_VMAG, LENGTH_OF_VMAG);
//        log("Vmag_asText = " + Vmag_asText);
//        Float         Vmag = trimAndValidateFloat(Vmag_asText);
                
        //  field:H6     Nunitunits:s:/A    
        //  possibles: *[1,3]? Coarse variability flag
        
//        String         VarFlag_asText                = new String(readBfr, OFFSET_TO_VARFLAG, LENGTH_OF_VARFLAG);
//        log("VarFlag_asText = " + VarFlag_asText);
//        Integer         VarFlag = trimAndValidateInteger(VarFlag_asText);
                
        //  field:H7     Nunitunits:s:/A    
        //  possibles: *[GHT] Source of magnitude
        
//        String         r_Vmag_asText                 = new String(readBfr, OFFSET_TO_R_VMAG, LENGTH_OF_R_VMAG);
//        log("r_Vmag_asText = " + r_Vmag_asText);
//        Character         r_Vmag = trimAndValidateCharacter(r_Vmag_asText);
                
        //  field:H8     deg    unitunits:s:*? alpha
        //  possibles: , degrees (ICRS, Epoch=J1991.25)
        
//        String         RAdeg_asText                  = new String(readBfr, OFFSET_TO_RADEG, LENGTH_OF_RADEG);
//        log("RAdeg_asText = " + RAdeg_asText);
//        Float         RAdeg = trimAndValidateFloat(RAdeg_asText);
                
        //  field:H9     deg    unitunits:s:*? delta
        //  possibles: , degrees (ICRS, Epoch=J1991.25)
        
//        String         DEdeg_asText                  = new String(readBfr, OFFSET_TO_DEDEG, LENGTH_OF_DEDEG);
//        log("DEdeg_asText = " + DEdeg_asText);
//        Float         DEdeg = trimAndValidateFloat(DEdeg_asText);
                
        // field:H10     Nunitunits:s:/A    
        //  possibles: *[*+String-Z] Reference flag for astrometry
        
//        String         AstroRef_asText               = new String(readBfr, OFFSET_TO_ASTROREF, LENGTH_OF_ASTROREF);
//        log("AstroRef_asText = " + AstroRef_asText);
//        Character         AstroRef = trimAndValidateCharacter(AstroRef_asText);
                
        // field:H11     mas     unitunits:s:? Trigonometric 
        //  possibles: parallax
        
//        String         Plx_asText                    = new String(readBfr, OFFSET_TO_PLX, LENGTH_OF_PLX);
//        log("Plx_asText = " + Plx_asText)//;
//        Float         Plx = trimAndValidateFloat(Plx_asText);

        // field:H12    masunitunits:s:/yr
        //  possibles: ? Proper motion mu_alpha.cos(delta), ICRS
        
//        String         pmRA_asText                   = new String(readBfr, OFFSET_TO_PMRA, LENGTH_OF_PMRA);
//        log("pmRA_asText = " + pmRA_asText);
//        Float         pmRA = trimAndValidateFloat(pmRA_asText);
                
        // field:H13    masunitunits:s:/yr   
        //  possibles: ? Proper motion mu_delta, ICRS
        
//        String         pmDE_asText                   = new String(readBfr, OFFSET_TO_PMDE, LENGTH_OF_PMDE);
//        log("pmDE_asText = " + pmDE_asText);
//        Float         pmDE = trimAndValidateFloat(pmDE_asText);
                
        // field:H14     mas     unitunits:s:? Standard 
        //  possibles: error in RA*cos(DEdeg)
        
//        String         e_RAdeg_asText                = new String(readBfr, OFFSET_TO_E_RADEG, LENGTH_OF_E_RADEG);
//        log("e_RAdeg_asText = " + e_RAdeg_asText);
//        Float         e_RAdeg = trimAndValidateFloat(e_RAdeg_asText);
                
        // field:H15     mas     unitunits:s:? Standard 
        //  possibles: error in DE
        
//        String         e_DEdeg_asText                = new String(readBfr, OFFSET_TO_E_DEDEG, LENGTH_OF_E_DEDEG);
//        log("e_DEdeg_asText = " + e_DEdeg_asText);
//        Float         e_DEdeg = trimAndValidateFloat(e_DEdeg_asText);
                
        // field:H16     mas     unitunits:s:? Standard 
        //  possibles: error in Plx
        
//        String         e_Plx_asText                  = new String(readBfr, OFFSET_TO_E_PLX, LENGTH_OF_E_PLX);
//        log("e_Plx_asText = " + e_Plx_asText);
//        Float         e_Plx =trimAndValidateFloat(e_Plx_asText);
                
        // field:H17    masunitunits:s:/yr   
        //  possibles: ? Standard error in pmRA
        
//        String         e_pmRA_asText                 = new String(readBfr, OFFSET_TO_E_PMRA, LENGTH_OF_E_PMRA);
//        log("e_pmRA_asText = " + e_pmRA_asText);
//        Float         e_pmRA = trimAndValidateFloat(e_pmRA_asText);
                
        // field:H18    masunitunits:s:/yr   
        //  possibles: ? Standard error in pmDE
        
//        String         e_pmDE_asText                 = new String(readBfr, OFFSET_TO_E_PMDE, LENGTH_OF_E_PMDE);
//        log("e_pmDE_asText = " + e_pmDE_asText);
//        Float         e_pmDE = trimAndValidateFloat(e_pmDE_asText);
                
        // field:H19     Nunitunits:s:/A     
        //  possibles: [-1/1]? Correlation, DE/RA*cos(delta)
        
//        String         DE_RA_asText                  = new String(readBfr, OFFSET_TO_DE_RA, LENGTH_OF_DE_RA);
//        log("DE_RA_asText = " + DE_RA_asText);
//        Float         DE_RA = trimAndValidateFloat(DE_RA_asText);
                
        // field:H20     Nunitunits:s:/A     
        //  possibles: [-1/1]? Correlation, Plx/RA*cos(delta)
        
//        String         Plx_RA_asText                 = new String(readBfr, OFFSET_TO_PLX_RA, LENGTH_OF_PLX_RA);
//        log("Plx_RA_asText = " + Plx_RA_asText);
//        Float         Plx_RA = trimAndValidateFloat(Plx_RA_asText);
                
        // field:H21     Nunitunits:s:/A     
        //  possibles: [-1/1]? Correlation, Plx/DE
        
//        String         Plx_DE_asText                 = new String(readBfr, OFFSET_TO_PLX_DE, LENGTH_OF_PLX_DE);
//        log("Plx_DE_asText = " + Plx_DE_asText);
//        Float         Plx_DE = trimAndValidateFloat(Plx_DE_asText);
                
        // field:H22     Nunitunits:s:/A     
        //  possibles: [-1/1]? Correlation, pmRA/RA*cos(delta)
        
//        String         pmRA_RA_asText                = new String(readBfr, OFFSET_TO_PMRA_RA, LENGTH_OF_PMRA_RA);
//        log("pmRA_RA_asText = " + pmRA_RA_asText);
//        Float         pmRA_RA = trimAndValidateFloat(pmRA_RA_asText);
                
        // field:H23     Nunitunits:s:/A     
        //  possibles: [-1/1]? Correlation, pmRA/DE
        
//        String         pmRA_DE_asText                = new String(readBfr, OFFSET_TO_PMRA_DE, LENGTH_OF_PMRA_DE);
//        log("pmRA_DE_asText = " + pmRA_DE_asText);
//        Float         pmRA_DE  = trimAndValidateFloat(pmRA_DE_asText);
                
        // field:H24     Nunitunits:s:/A     
        //  possibles: [-1/1]? Correlation, pmRA/Plx
        
//        String         pmRA_Plx_asText               = new String(readBfr, OFFSET_TO_PMRA_PLX, LENGTH_OF_PMRA_PLX);
//        log("pmRA_Plx_asText = " + pmRA_Plx_asText);
//        Float         pmRA_Plx = trimAndValidateFloat(pmRA_Plx_asText);
                
        // field:H25     Nunitunits:s:/A     
        //  possibles: [-1/1]? Correlation, pmDE/RA*cos(delta)
        
//        String         pmDE_RA_asText                = new String(readBfr, OFFSET_TO_PMDE_RA, LENGTH_OF_PMDE_RA);
//        log("pmDE_RA_asText = " + pmDE_RA_asText);
//        Float         pmDE_RA = trimAndValidateFloat(pmDE_RA_asText);
                
        // field:H26     Nunitunits:s:/A     
        //  possibles: [-1/1]? Correlation, pmDE/DE
        
//        String         pmDE_DE_asText                = new String(readBfr, OFFSET_TO_PMDE_DE, LENGTH_OF_PMDE_DE);
//        log("pmDE_DE_asText = " + pmDE_DE_asText);
//        Float         pmDE_DE = trimAndValidateFloat(pmDE_DE_asText);
                
        // field:H27     Nunitunits:s:/A     
        //  possibles: [-1/1]? Correlation, pmDE/Plx
        
//        String         pmDE_Plx_asText               = new String(readBfr, OFFSET_TO_PMDE_PLX, LENGTH_OF_PMDE_PLX);
//        log("pmDE_Plx_asText = " + pmDE_Plx_asText);
//        Float         pmDE_Plx = trimAndValidateFloat(pmDE_Plx_asText);
                
        // field:H28     Nunitunits:s:/A     
        //  possibles: [-1/1]? Correlation, pmDE/pmRA
        
//        String         pmDE_pmRA_asText              = new String(readBfr, OFFSET_TO_PMDE_PMRA, LENGTH_OF_PMDE_PMRA);
//        log("pmDE_pmRA_asText = " + pmDE_pmRA_asText);
//        Float         pmDE_pmRA = trimAndValidateFloat(pmDE_pmRA_asText);
                
        // field:H29     %       unitunits:s:? Percentage 
        //  possibles: of rejected data
        
//        String         F1_asText                     = new String(readBfr, OFFSET_TO_F1, LENGTH_OF_F1);
//        log("F1_asText = " + F1_asText);
//        Integer         F1 = trimAndValidateInteger(F1_asText);
                
        // field:H30     Nunitunits:s:/A    
        //  possibles: *? Goodness-of-fit parameter
        
//        String         F2_asText                     = new String(readBfr, OFFSET_TO_F2, LENGTH_OF_F2);
//        log("F2_asText = " + F2_asText);
//        Float         F2 = trimAndValidateFloat(F2_asText);
                
        // field:H32     mag     unitunits:s:? Mean 
        //  possibles: BT magnitude
        
//        String         BTmag_asText                  = new String(readBfr, OFFSET_TO_BTMAG, LENGTH_OF_BTMAG);
//        log("BTmag_asText = " + BTmag_asText);
//        Float         BTmag = trimAndValidateFloat(BTmag_asText);
                
        // field:H33     mag     unitunits:s:? Standard 
        //  possibles: error on BTmag
        
//        String         e_BTmag_asText                = new String(readBfr, OFFSET_TO_E_BTMAG, LENGTH_OF_E_BTMAG);
//        log("e_BTmag_asText = " + e_BTmag_asText);
//        Float         e_BTmag = trimAndValidateFloat(e_BTmag_asText);
                
        // field:H34     mag     unitunits:s:? Mean 
        //  possibles: VT magnitude
        
//        String         VTmag_asText                  = new String(readBfr, OFFSET_TO_VTMAG, LENGTH_OF_VTMAG);
//        log("VTmag_asText = " + VTmag_asText);
//        Float         VTmag = trimAndValidateFloat(VTmag_asText);
                
        // field:H35     mag     unitunits:s:? Standard 
        //  possibles: error on VTmag
        
//        String         e_VTmag_asText                = new String(readBfr, OFFSET_TO_E_VTMAG, LENGTH_OF_E_VTMAG);
//        log("e_VTmag_asText = " + e_VTmag_asText);
//        Float         e_VTmag = trimAndValidateFloat(e_VTmag_asText);
                
        // field:H36     Nunitunits:s:/A    
        //  possibles: *[String-Z*-] Reference flag for BT and VTmag
        
//        String         m_BTmag_asText                = new String(readBfr, OFFSET_TO_M_BTMAG, LENGTH_OF_M_BTMAG);
//        log("m_BTmag_asText = " + m_BTmag_asText);
//        Character         m_BTmag = trimAndValidateCharacter(m_BTmag_asText);
                
        // field:H37     mag     unitunits:s:? Johnson 
        //  possibles: B-V colour
        
//        String         B_V_asText                    = new String(readBfr, OFFSET_TO_B_V, LENGTH_OF_B_V);
//        log("B_V_asText = " + B_V_asText);
//        Float         B_V = trimAndValidateFloat(B_V_asText);
                
        // field:H38     mag     unitunits:s:? Standard 
        //  possibles: error on B-V
        
//        String         e_B_V_asText                  = new String(readBfr, OFFSET_TO_E_B_V, LENGTH_OF_E_B_V);
//        log("e_B_V_asText = " + e_B_V_asText);
//        Float         e_B_V = trimAndValidateFloat(e_B_V_asText);
                
        // field:H39     Nunitunits:s:/A     
        //  possibles: [GT] Source of B-V from Ground or Tycho
        
//        String         r_B_V_asText                  = new String(readBfr, OFFSET_TO_R_B_V, LENGTH_OF_R_B_V);
//        log("r_B_V_asText = " + r_B_V_asText);
//        Character         r_B_V = trimAndValidateCharacter(r_B_V_asText);
                
        // field:H40     mag     unitunits:s:? Colour 
        //  possibles: index in Cousins' system
        
//        String         V_I_asText                    = new String(readBfr, OFFSET_TO_V_I, LENGTH_OF_V_I);
//        log("V_I_asText = " + V_I_asText);
//        Float         V_I = trimAndValidateFloat(V_I_asText);
                
        // field:H41     mag     unitunits:s:? Standard 
        //  possibles: error on V-Integer
        
//        String         e_V_I_asText                  = new String(readBfr, OFFSET_TO_E_V_I, LENGTH_OF_E_V_I);
//        log("e_V_I_asText = " + e_V_I_asText);
//        Float        e_V_I = trimAndValidateFloat(e_V_I_asText);
                
        // field:H42     Nunitunits:s:/A    
        //  possibles: *[String-T] Source of V-Integer
        
//        String         r_V_I_asText                  = new String(readBfr, OFFSET_TO_R_V_I, LENGTH_OF_R_V_I);
//        log("r_V_I_asText = " + r_V_I_asText);
//        Character        r_V_I = trimAndValidateCharacter(r_V_I_asText);
                
        // field:H43     Nunitunits:s:/A     
        //  possibles: [*] Flag for combined Vmag, B-V, V-Integer
        
//        String         CombMag_asText                = new String(readBfr, OFFSET_TO_COMBMAG, LENGTH_OF_COMBMAG);
//        log("CombMag_asText = " + CombMag_asText);
//        Character         CombMag = trimAndValidateCharacter(CombMag_asText);
                
        // field:H44     mag    unitunits:s:*? Median 
        //  possibles: magnitude in Hipparcos system
        
//        String         Hpmag_asText                  = new String(readBfr, OFFSET_TO_HPMAG, LENGTH_OF_HPMAG);
//        log("Hpmag_asText = " + Hpmag_asText);
//        Float         Hpmag = trimAndValidateFloat(Hpmag_asText);
                
        // field:H45     mag    unitunits:s:*? Standard 
        //  possibles: error on Hpmag
        
//        String         e_Hpmag_asText                = new String(readBfr, OFFSET_TO_E_HPMAG, LENGTH_OF_E_HPMAG);
//        log("e_Hpmag_asText = " + e_Hpmag_asText);
//        Float        e_Hpmag = trimAndValidateFloat(e_Hpmag_asText);
                
        // field:H46     mag     unitunits:s:? Scatter 
        //  possibles: on Hpmag
        
//        String         Hpscat_asText                 = new String(readBfr, OFFSET_TO_HPSCAT, LENGTH_OF_HPSCAT);
//        log("Hpscat_asText = " + Hpscat_asText);
//        Float         Hpscat = trimAndValidateFloat(Hpscat_asText);
                
        // field:H47     Nunitunits:s:/A     
        //  possibles: ? Number of observations for Hpmag
        
//        String         o_Hpmag_asText                = new String(readBfr, OFFSET_TO_O_HPMAG, LENGTH_OF_O_HPMAG);
//        log("o_Hpmag_asText = " + o_Hpmag_asText);
//        Integer         o_Hpmag  = trimAndValidateInteger(o_Hpmag_asText);
                
        // field:H48     Nunitunits:s:/A    
        //  possibles: *[String-Z*-] Reference flag for Hpmag
        
//        String         m_Hpmag_asText                = new String(readBfr, OFFSET_TO_M_HPMAG, LENGTH_OF_M_HPMAG);
//        log("m_Hpmag_asText = " + m_Hpmag_asText);
//        Character         m_Hpmag  = trimAndValidateCharacter(m_Hpmag_asText);
                
        // field:H49     mag     unitunits:s:? Hpmag 
        //  possibles: at maximum (5th percentile)
        
//        String         Hpmax_asText                  = new String(readBfr, OFFSET_TO_HPMAX, LENGTH_OF_HPMAX);
//        log("Hpmax_asText = " + Hpmax_asText);
//        Float         Hpmax = trimAndValidateFloat(Hpmax_asText);
                
        // field:H50     mag     unitunits:s:? Hpmag 
        //  possibles: at minimum (95th percentile)
        
//        String         HPmin_asText                  = new String(readBfr, OFFSET_TO_HPMIN, LENGTH_OF_HPMIN);
//        log("HPmin_asText = " + HPmin_asText);
//        Float         HPmin = trimAndValidateFloat(HPmin_asText);
                
        // field:H51     d       unitunits:s:? Variability 
        //  possibles: period (days)
        
//        String         Period_asText                 = new String(readBfr, OFFSET_TO_PERIOD, LENGTH_OF_PERIOD);
//        log("Period_asText = " + Period_asText);
//        Float         Period = trimAndValidateFloat(Period_asText);
                
        // field:H52     Nunitunits:s:/A    
        //  possibles: *[CDMPRU]? variability type
        
//        String         HvarType_asText               = new String(readBfr, OFFSET_TO_HVARTYPE, LENGTH_OF_HVARTYPE);
//        log("HvarType_asText = " + HvarType_asText);
//        Character         HvarType = trimAndValidateCharacter(HvarType_asText);
                
        // field:H53     Nunitunits:s:/A    
        //  possibles: *[12] Additional data about variability
        
//        String         moreVar_asText                = new String(readBfr, OFFSET_TO_MOREVAR, LENGTH_OF_MOREVAR);
//        log("moreVar_asText = " + moreVar_asText);
//        Character         moreVar = trimAndValidateCharacter(moreVar_asText);
                
        // field:H54     Nunitunits:s:/A     
        //  possibles: [ABC] Light curve Annex
        
//        String         morePhoto_asText              = new String(readBfr, OFFSET_TO_MOREPHOTO, LENGTH_OF_MOREPHOTO);
//        log("morePhoto_asText = " + morePhoto_asText);
//        Character         morePhoto = trimAndValidateCharacter(morePhoto_asText);
                
        // field:H55     Nunitunits:s:/A     
        //  possibles: CCDM identifier
        
//        String         CCDM_asText                   = new String(readBfr, OFFSET_TO_CCDM, LENGTH_OF_CCDM);
//        log("CCDM_asText = " + CCDM_asText);
//        String         CCDM = trimAndValidateString(CCDM_asText);
                
        // field:H56     Nunitunits:s:/A    
        //  possibles: *[HIM] Historical status flag
        
//        String         n_CCDM_asText                 = new String(readBfr, OFFSET_TO_N_CCDM, LENGTH_OF_N_CCDM);
//        log("n_CCDM_asText = " + n_CCDM_asText);
//        Character         n_CCDM = trimAndValidateCharacter(n_CCDM_asText);
                
        // field:H57     Nunitunits:s:/A     
        //  possibles: ? Number of entries with same CCDM
        
//        String         Nsys_asText                   = new String(readBfr, OFFSET_TO_NSYS, LENGTH_OF_NSYS);
//        log("Nsys_asText = " + Nsys_asText);
//        Integer         Nsys = trimAndValidateInteger(Nsys_asText);
                
        // field:H58     Nunitunits:s:/A     
        //  possibles: ? Number of components in this entry
        
//        String         Ncomp_asText                  = new String(readBfr, OFFSET_TO_NCOMP, LENGTH_OF_NCOMP);
//        log("Ncomp_asText = " + Ncomp_asText);
//        Integer         Ncomp = trimAndValidateInteger(Ncomp_asText);
                
        // field:H59     Nunitunits:s:/A    
        //  possibles: *[CGOVX] Double/Multiple Systems flag
        
//        String         MultFlag_asText               = new String(readBfr, OFFSET_TO_MULTFLAG, LENGTH_OF_MULTFLAG);
//        log("MultFlag_asText = " + MultFlag_asText);
//        Character         MultFlag = trimAndValidateCharacter(MultFlag_asText);
                
        // field:H60     Nunitunits:s:/A    
        //  possibles: *[PFILS] Astrometric source flag
        
//        String         Source_asText                 = new String(readBfr, OFFSET_TO_SOURCE, LENGTH_OF_SOURCE);
//        log("Source_asText = " + Source_asText);
//        Character         Source = trimAndValidateCharacter(Source_asText);
                
        // field:H61     Nunitunits:s:/A    
        //  possibles: *[ABCDS] Solution quality
        
//        String         Qual_asText                   = new String(readBfr, OFFSET_TO_QUAL, LENGTH_OF_QUAL);
//        log("Qual_asText = " + Qual_asText);
//        Character         Qual = trimAndValidateCharacter(Qual_asText);
                
        // field:H62     Nunitunits:s:/A     
        //  possibles: Component identifiers
        
//        String         m_HIP_asText                  = new String(readBfr, OFFSET_TO_M_HIP, LENGTH_OF_M_HIP);
//        log("m_HIP_asText = " + m_HIP_asText);
//        String         m_HIP = trimAndValidateString(m_HIP_asText);
                
        // field:H63     deg     unitunits:s:? Position 
        //  possibles: angle between components
        
//        String         theta_asText                  = new String(readBfr, OFFSET_TO_THETA, LENGTH_OF_THETA);
//        log("theta_asText = " + theta_asText);
//        Integer         theta = trimAndValidateInteger(theta_asText);
                
        // field:H64     arcse   unitunits:s:? Angular 
        //  possibles: separation between components
        
//        String         rho_asText                    = new String(readBfr, OFFSET_TO_RHO, LENGTH_OF_RHO);
//        log("rho_asText = " + rho_asText);
//        Float         rho = trimAndValidateFloat(rho_asText);
                
        // field:H65     arcse   unitunits:s:? Standard 
        //  possibles: error on rho
        
//        String         e_rho_asText                  = new String(readBfr, OFFSET_TO_E_RHO, LENGTH_OF_E_RHO);
//        log("e_rho_asText = " + e_rho_asText);
//        Float          e_rho = trimAndValidateFloat(e_rho_asText);
                
        // field:H66     mag     unitunits:s:? Magnitude 
        //  possibles: difference of components
        
//        String         dHp_asText                    = new String(readBfr, OFFSET_TO_DHP, LENGTH_OF_DHP);
//        log("dHp_asText = " + dHp_asText);
//        Float         dHp = trimAndValidateFloat(dHp_asText);
                
        // field:H67     mag     unitunits:s:? Standard 
        //  possibles: error on dHp
        
//        String         e_dHp_asText                  = new String(readBfr, OFFSET_TO_E_DHP, LENGTH_OF_E_DHP);
//        log("e_dHp_asText = " + e_dHp_asText);
//        Float         e_dHp = trimAndValidateFloat(e_dHp_asText);
                
        // field:H68     Nunitunits:s:/A     
        //  possibles: [S] Flag indicating a Survey Star
        
//        String         Survey_asText                 = new String(readBfr, OFFSET_TO_SURVEY, LENGTH_OF_SURVEY);
//        log("Survey_asText = " + Survey_asText);
//        Character         Survey = trimAndValidateCharacter(Survey_asText);
                
        // field:H69     Nunitunits:s:/A    
        //  possibles: *[DG] Identification Chart
        
//        String         Chart_asText                  = new String(readBfr, OFFSET_TO_CHART, LENGTH_OF_CHART);
//        log("Chart_asText = " + Chart_asText);
//        Character         Chart = trimAndValidateCharacter(Chart_asText);
                
        // field:H70     Nunitunits:s:/A    
        //  possibles: *[DGPWXYZ] Existence of notes
        
//        String         Notes_asText                  = new String(readBfr, OFFSET_TO_NOTES, LENGTH_OF_NOTES);
//        log("Notes_asText = " + Notes_asText);
//        Character         Notes = trimAndValidateCharacter(Notes_asText);
                
        // field:H71     Nunitunits:s:/A     
        //  possibles: [1/359083]? HD number <III/135>
        
//        String         HD_asText                     = new String(readBfr, OFFSET_TO_HD, LENGTH_OF_HD);
//        log("HD_asText = " + HD_asText);
//        Integer         HD = trimAndValidateInteger(HD_asText);
                
        // field:H72     Nunitunits:s:/A     
        //  possibles: Bonner DM <Integer/119>, <Integer/122>
        
//        String         BD_asText                     = new String(readBfr, OFFSET_TO_BD, LENGTH_OF_BD);
//        log("BD_asText = " + BD_asText);
//        String         BD = trimAndValidateString(BD_asText);
                
        // field:H73     Nunitunits:s:/A     
        //  possibles: Cordoba Durchmusterung (DM) <Integer/114>
        
//        String         CoD_asText                    = new String(readBfr, OFFSET_TO_COD, LENGTH_OF_COD);
//        log("CoD_asText = " + CoD_asText);
//        String         CoD = trimAndValidateString(CoD_asText);
                
        // field:H74     Nunitunits:s:/A     
        //  possibles: Cape Photographic DM <Integer/108>
        
//        String         CPD_asText                    = new String(readBfr, OFFSET_TO_CPD, LENGTH_OF_CPD);
//        log("CPD_asText = " + CPD_asText);
//        String         CPD = trimAndValidateString(CPD_asText);
                
        // field:H75     mag     unitunits:s:V
        //  possibles: -Integer used for reductions
        
//        String         VI_red_asText                 = new String(readBfr, OFFSET_TO_VI_RED, LENGTH_OF_VI_RED);
//        log("VI_red_asText = " + VI_red_asText);
//        Float         VI_red = trimAndValidateFloat(VI_red_asText);
                
        // field:H76     Nunitunits:s:/A     
        //  possibles: Spectral type
        
//        String         SpType_asText                 = new String(readBfr, OFFSET_TO_SPTYPE, LENGTH_OF_SPTYPE);
//        log("SpType_asText = " + SpType_asText);
//        String         SpType = trimAndValidateString(SpType_asText);
                
        // field:H77     Nunitunits:s:/A    
        //  possibles: *[1234GKSX]? Source of spectral type
        
//        String         r_SpType_asText               = new String(readBfr, OFFSET_TO_R_SPTYPE, LENGTH_OF_R_SPTYPE);
//        log("r_SpType_asText = " + r_SpType_asText.trim());    
//        Character         r_SpType = trimAndValidateCharacter(r_SpType_asText);

        // If it has no parallax we can't calculate the coordinates

/*
       if ( (Plx == null) ||( Plx.isNaN() == true) || (Plx.isInfinite() == true) )
       {
 		}
       else
       {
   		 	printOutConvertedCoords(HIP, RAhms, DEdms, Plx);
		}
*/
    }

    public static void main(String[] args) throws LexerCreationException, ParsingException, FileNotFoundException, IOException
    {
		byte[] readBfr = new byte[RECORDSIZE];

        try
        {
            // Parse the command line arguments

			CommandLineParser parser = new CommandLineParser();

            parser.parse(args);

            // Open the input stream

            m_FileInput = new FileInputStream(parser.getInFile());

            // Open the output stream

            m_FileOutput = new FileWriter(parser.getOutFile());

            // Set the verbosity flag

			m_Verbose = false;

            if (parser.getVerbose() != null)
            {
                m_Verbose = parser.getVerbose().booleanValue();
            }

			// Get the count

            m_Records = 10;

            int count = 0;

            if (parser.getRecords() != null)
            {
				m_Records = parser.getRecords().intValue();
            }

            while (m_FileInput.read(readBfr) != 0 && count != m_Records)
            {
                String charBfr = new String(readBfr);

	            // Dump the contents
	            m_Fields.populate(charBfr.toCharArray());
                count++;
            }
        }
        finally
        {
            if (m_FileInput != null)
            {
	            m_FileInput.close();
            }

            if (m_FileOutput != null)
			{
	            m_FileOutput.close();
            }
        }
    }

    private static class CommandLineParser extends IOFilterParser
   	{
   	    public CommandLineParser() throws IllegalArgumentException, LexerCreationException
   	    {
   	        super();
   	
   	        this.register(new Parser.ArgSemantic("verbose", "v", "Verbose reporting", "java.lang.Boolean", false));
   	        this.register(new Parser.ArgSemantic("records", "rec", "Records to be processed", "java.lang.Integer", false));
   	    }

   	    public Boolean getVerbose()
   	    {
   	        return((Boolean) getParsedArgument("verbose"));
   	    }

   	    public Integer getRecords()
   	    {
   	        return((Integer) getParsedArgument("records"));
   	    }
   	}
    
}
