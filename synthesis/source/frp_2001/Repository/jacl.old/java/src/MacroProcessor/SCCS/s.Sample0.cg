h54181
s 00005/00000/00052
d D 1.8 99/12/17 15:04:22 jmochel 9 8
c Restart
cC
cK12860
e
s 00004/00002/00048
d D 1.7 99/12/07 07:46:00 jmochel 8 7
c Now recognizes include statements
cC
cK52341
e
s 00005/00002/00045
d D 1.6 99/12/07 07:06:36 jmochel 7 6
c Macro Invocations are now recognized
cC
cK45669
e
s 00002/00000/00045
d D 1.5 99/12/02 17:11:07 jmochel 6 5
c Now does basic recognition of a variable expansion
cC
cK41067
e
s 00001/00001/00044
d D 1.4 99/11/23 13:22:46 jmochel 5 4
c SCCS/s.Sample0.cg
c SCCS/s.TemplateParser.g
c SCCS/s.Main.java
c SCCS/s.TemplateLexer.g
cC
cK38171
e
s 00001/00000/00044
d D 1.3 99/11/17 13:27:34 jmochel 4 3
c Added a header of key words
cC
cK38205
e
s 00030/00000/00014
d D 1.2 99/11/17 13:21:56 jmochel 3 2
c Added BK keywords for expansion
cC
cK36600
e
s 00014/00000/00000
d D 1.1 99/11/17 12:55:07 jmochel 2 1
cC
cK10652
cO-rw-rw-rw-
e
s 00000/00000/00000
d D 1.0 99/11/17 12:55:04 jmochel 1 0
c BitKeeper file e:/jacl/java/src/MacroProcessor/Sample0.cg
cBjmochel@devilmountain.bedford.foliage.com|ChangeSet|19991117121845|52994|b286d56f5cb6bb79
cHdevilmountain.bedford.foliage.com
cK45362
cPjava/src/MacroProcessor/Sample0.cg
cR2f93d73a5cb6ba86
cZ-05:00
c______________________________________________________________________
e
u
U
f e 0
f x 33
t
T
I 4
D 5
"%M% %I% modified %E% %U%
E 5
I 5
%M% %I% modified %E% %U%
E 5
E 4
I 2
.include "test"
For compiling with the Pure C compiler on the Atari ST, you must compile
and install the packages in the order 'libtmc', 'tm', 'tmc'.  See the
README files in each of the directories. Note that as of version 1.2,
the Atari ST version is no longer supported (I have sold my ST).
For compiling with the Borland C++ compiler under MSDOS/MS-Windows, you must
compile and install the packages in the order 'libtmc', 'tm', 'tmc'.
See the README files in each of the directories.
.include "The Big Test.cg"
ANTLR 2.5.0 introduced an AWK-like lexical filtering mode that forces 
generated lexers to ignore any characters that do not match a lexical 
rule exactly.  To turn ANTLR into SED, all you have to do is make a 
lexical filter rule that prints out the characters that don't match 
anything.  Then, it's up to the lexical rules to generate what they want.
I 3

I 9
.set volare = "schmoo"
%M% ${volare}: either the value of the m flag in the file, or if absent, the name of the SCCS file with the leading s. removed. 
.set volare = "schmoo1"
%M% ${volare}: either the value of the m flag in the file, or if absent, the name of the SCCS file with the leading s. removed. 

E 9
I 6
${volare}
E 6

%M% Module name: either the value of the m flag in the file, or if absent, the name of the SCCS file with the leading s. removed. 
%I% SCCS identification (SID) (%R%.%L% or %R%.%L%.%B%.%S%) of the retrieved text 
%R% Release. 
%L% Level. 
%B% Branch. 
%S% Sequence. 
%D% Current date (YY/MM/DD). 
%H% Current date (MM/DD/YY). 
%T% Current time (HH:MM:SS). 
%E% Date newest applied delta was created (YY/MM/DD). 
%G% Date newest applied delta was created (MM/DD/YY). 
%U% Time newest applied delta was created (HH:MM:SS). 
%Y% Module type: value of the t flag in the SCCS file. 
%F% SCCS filename. 
%P% SCCS absolute pathname. 
%Q% The value of the q flag in the file. 
%C% Current line number. This keyword is intended for identifying messages output by the program, such as "this should not have happened" type errors. It is not intended to be used on every line to provide sequence numbers. 
%Z% The four-character string @(#) recognisable by what. 
%W% A shorthand notation for constructing what strings: 

I 8
.set var1 = "testtext"
.set var2 = $function3("arg0" , "arg2")
.set var3 = ${volare}

E 8
%W%=%Z%%M%<tab>%I%

I 6
D 7
$function1("arg1","arg2")
E 7
I 7
$function1("arg1")
E 7
E 6

D 7
%A% Another shorthand notation for constructing what strings: 
E 7
I 7
%A% Another shorthand notation for constructing $function2("arg0") strings: 

$function3("arg0" , "arg2")
$function4("arg0" , "arg2")
E 7

%A%=%Z%%Y%%M%%I%%Z%
D 8


E 8
E 3
E 2
I 1
E 1
