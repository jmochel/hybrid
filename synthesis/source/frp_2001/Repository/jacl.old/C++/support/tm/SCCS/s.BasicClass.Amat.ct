h46970
s 00904/00000/00000
d D 1.1 99/11/17 12:49:44 jmochel 2 1
cC
cK08065
cO-rw-rw-rw-
e
s 00000/00000/00000
d D 1.0 99/11/17 12:49:40 jmochel 1 0
c BitKeeper file e:/jacl/C++/support/tm/BasicClass.Amat.ct
cBjmochel@devilmountain.bedford.foliage.com|ChangeSet|19991117121845|52994|b286d56f5cb6bb79
cHdevilmountain.bedford.foliage.com
cK45330
cPC++/support/tm/BasicClass.Amat.ct
cR2f93d7d45cb6ba86
cZ-05:00
c______________________________________________________________________
e
u
U
f e 0
f x 33
t
T
I 2
.. BasicClass.java.ct
.. Defines the standard class member functions and so on for a java class.
..
.. JSJM
.. 03/20/98
..
.. Generate the class and root file name

.insert Util.Amat.ct
.insert BasicUnitTest.Amat.ct

..  ===================================================
..
..  Desc 
..      Generates a basic class header
..
..  Parameters
..
..
..  Notes
..
..
..  ===================================================
.macro GenClassDef fileroot classname T 
.set varclassname a$T
.redirect $(fileroot).h
#ifndef __${toupper $(fileroot)}_H__
#define __${toupper $(fileroot)}_H__
#pragma once

// @doc
//============================================================================
//
//    Copyright Applied Materials Inc., 
//    Unpublished work, create 1998.
//    All use, disclosure, and/or reproduction of this material is
//    prohibited unless authorized in writing.
//    All Rights Reserved.
//
//    Rights in this program belong to:
//
//        Applied Materials Inc.
//        Foundry Lane
//        Horsham, West Sussex, RH13 5PY
//
//
//============================================================================
//
//  File Name:  <???>
//
//  Description:
//      <???>
//
//  Classes defined in this file:
//      <???>
//
//============================================================================
//
//      $$Archive:$$
//      $$Author: jmochel $$
//      $$Date: 1998/07/25 03:48:56 $$
//      $$Revision: 1.3 $$
//
//============================================================================

#pragma message("JSJM: Code Guideline: Check API Naming")
#pragma message("JSJM: Code Guideline: Check API Types")
#pragma message("JSJM: Code Guideline: Check API Returns")
#pragma message("JSJM: Code Guideline: Check API Exceptions")
#pragma message("JSJM: Code Guideline: Check API Exception Specifications")
#pragma message("JSJM: Code Guideline: Check Comments")

#pragma message("JSJM: Code Guideline: Use new cast operators - dynamic_cast etc... ")
#pragma message("JSJM: Code Guideline: Test array indices before using them to ensure no off-by-ones")
#pragma message("JSJM: Code Guideline: Use const on parameters not modified by a method")
#pragma message("JSJM: Code Guideline: Avoid friend functions or document why !")
#pragma message("JSJM: Code Guideline: All switch statements => default clause")
#pragma message("JSJM: Code Guideline: Avoid abbreviations")
#pragma message("JSJM: Code Guideline: Used mixed case for identifeirs")
#pragma message("JSJM: Code Guideline: Do not use exceptions as a normal means of reporting errors")

#pragma message("JSJM: Code Guideline: Hung Notation - p=>Ptr, h=>Handle, r=>Reference, vVariant")

// Library Headers

.. Walk through the types use and determine what headers to include.
..
.set stringfound 0
...foreach T ${ttypelist}
.foreach E ${telmlist $T}
.set elttype ${ttypename $T $E}
.if ${eq $(elttype) string }
.set stringfound 1
.endif
.endforeach
...endforeach

.if ${== $(stringfound) 1 }
#include <string>
.endif

#include "swiftverify.h"    // For SWIFT_VERIFY(condition)

.. Class declaration


//
//
//  @ClassDesc
//
//      $(classname) <???>
//
//  @ClassLongDesc
//
//      <???>
//
//  @ClassNotes
//
//      <???>
//
//
//

class $(classname)
{
    // @Access  Public

    public:

.if ${> ${len ${ctypelist}} 0}

        //===============================================
        //      Typedefs/Constants
        //===============================================

.foreach A ${ctypelist}
        // @MemberDesc    <???>

        enum ${capitalize $A}
        {
.foreach B ${conslist $A}
           ${capitalize  $B},
.endforeach
        };
.endforeach

.endif

        //===============================================
        //      Constructors/Destructor
        //===============================================


        // @MemberDesc    Void Constructor

        $(classname)();

        // @MemberDesc    Copy Constructor

        $(classname)(const $(classname)& $(varclassname));

        // @MemberDesc    Constructor

        $(classname)(
.foreach E ${telmlist $T}
.set eltname ${capitalize $E}
.set vareltname $E
.. If the type is an enum, add a class scope prefix.
.set elttype ${ttypename $T $E}
.if ${call PassAsRef $(elttype)}
.set elttype ${call NormalizeForMSVC $(elttype) }
         const $(elttype)& $(vareltname)
.else
.set elttype ${call NormalizeForMSVC $(elttype) }
         const $(elttype) $(vareltname)
.endif
.if ${call IsLastTermInList $E "${telmlist $T}" }
.else
    ,
.endif
.endforeach
        );

        // @MemberDesc    Destructor

        virtual ~$(classname)();

        //===============================================
        //      Accessors
        //===============================================

.foreach E ${telmlist $T}
.set eltname ${capitalize $E}
.set elttype ${ttypename $T $E}
.. If the type is an enum, add a class scope prefix.
.if ${member ${tolower $(elttype)} ${ctypelist} }
.set elttype $(classname)::$(elttype)
.endif
        // @MemberDesc    Gets $(eltname)

.if ${call PassAsRef $(elttype) }
        const ${call NormalizeForMSVC $(elttype)} Get$(eltname)(void) const;
.else
        const ${call NormalizeForMSVC $(elttype)} Get$(eltname)(void) const;
.endif

.endforeach

        //===============================================
        //      Mutators
        //===============================================

.foreach E ${telmlist $T}
.set eltname ${capitalize $E}
.set vareltname $E
.set elttype ${ttypename $T $E}
.. If the type is an enum, add a class scope prefix.
.if ${member ${tolower $(elttype)} ${ctypelist} }
.set elttype $(classname)::$(elttype)
.endif

        // @MemberDesc    Sets $(eltname)

.. If the type should be passed as a reference
.if ${call PassAsRef $(elttype)}
        HRESULT Set$(eltname)(const ${call NormalizeForMSVC $(elttype)}& $(vareltname));
.else
        HRESULT Set$(eltname)(const ${call NormalizeForMSVC $(elttype)} $(vareltname));
.endif

.endforeach

        //===============================================
        //      Validation
        //===============================================

        HRESULT Validate(void);

        //===============================================
        //      Maintainence
        //===============================================

        // @MemberDesc    Assignment Operator

        $(classname)& operator =(const $(classname)& $(varclassname));

        //===============================================
        //      Logic Operators
        //===============================================

        // @MemberDesc    Generic compare for $(classname)

        INT  CompareTo(const $(classname)& $(varclassname)) const;

        // @MemberDesc    Equality operator

        bool operator ==(const $(classname)& $(varclassname)) const;

        // @MemberDesc    Inequality operator

        bool operator !=(const $(classname)& $(varclassname)) const;

        // @MemberDesc    Less-than operator

        bool operator <(const $(classname)& $(varclassname)) const;

        // @MemberDesc    Greater-than operator

        bool operator >(const $(classname)& $(varclassname)) const;

    // @Access Protected

    protected:

        // @MemberDesc Sets the Default values for the objects data members

	    void SetDefaults(void);
        
    // @Access Protected

    protected:
.foreach E ${telmlist $T}
.set eltname ${capitalize $E}
.set elttype ${ttypename $T $E}

        // @MemberDesc      <???>

        ${call NormalizeForMSVC $(elttype)}  m_$(eltname);
.endforeach
};

//============================================================================
//
//  Revision Log:
//
//      $$Log: BasicClass.Amat.ct,v $
//      $Revision 1.3  1998/07/25 03:48:56  jmochel
//      $Testing ClassProxy initialization, not yet working
//      $$
//      $$Revision 1.2  1998/07/21 11:09:19  jmochel $$
//      $$Most of the Gauntlet compiles now  $$
//      
//      
//============================================================================

#endif //  __${toupper $(fileroot)}_H__
.endredirect
.endmacro
..  ===================================================
..
..  Desc 
..      Generates a basic class implementation
..
..  Parameters
..
..
..  Notes
..
..
..  ===================================================
.macro GenClassImp fileroot classname T
.set varclassname a$T
.redirect $(fileroot).cpp
// @doc
//============================================================================
//
//    Copyright Applied Materials Inc., 
//    Unpublished work, create 1998.
//    All use, disclosure, and/or reproduction of this material is
//    prohibited unless authorized in writing.
//    All Rights Reserved.
//
//    Rights in this program belong to:
//
//        Applied Materials Inc.
//        Foundry Lane
//        Horsham, West Sussex, RH13 5PY
//
//
//============================================================================
//
//  File Name:  $(fileroot).cpp
//
//  Description:
//
//      Implementation of $(fileroot).
//
//============================================================================
//
//      $$Archive:$$
//      $$Author: jmochel $$
//      $$Date: 1998/07/25 03:48:56 $$
//      $$Revision: 1.3 $$
//

#pragma message("JSJM: Code Guideline: Check API Naming")
#pragma message("JSJM: Code Guideline: Check API Types")
#pragma message("JSJM: Code Guideline: Check API Returns")
#pragma message("JSJM: Code Guideline: Check API Exceptions")
#pragma message("JSJM: Code Guideline: Check API Exception Specifications")
#pragma message("JSJM: Code Guideline: Check Comments")

#pragma message("JSJM: Code Guideline: Use new cast operators - dynamic_cast etc... ")
#pragma message("JSJM: Code Guideline: Test array indices before using them to ensure no off-by-ones")
#pragma message("JSJM: Code Guideline: Use const on parameters not modified by a method")
#pragma message("JSJM: Code Guideline: Avoid friend functions or document why !")
#pragma message("JSJM: Code Guideline: All switch statements => default clause")
#pragma message("JSJM: Code Guideline: Avoid abbreviations")
#pragma message("JSJM: Code Guideline: Used mixed case for identifeirs")
#pragma message("JSJM: Code Guideline: Do not use exceptions as a normal means of reporting errors")

#pragma message("JSJM: Code Guideline: Hung Notation - p=>Ptr, h=>Handle, r=>Reference, vVariant")

#include "$(fileroot).h"

/*
    ===============================================================================

                                    Constructors/Destructor

    ===============================================================================

*/

//
//
//  @MethodDesc
//
//      Void Constructor
//

$(classname)::$(classname)()
{
	SetDefaults();
}


//
//
//  @MethodDesc
//
//      Copy Constructor
//

$(classname)::$(classname)(const $(classname)& $(varclassname))
{
.foreach E ${telmlist $T}
.set eltname ${capitalize $E}
.set elttype ${ttypename $T $E}
    SWIFT_VERIFY($(varclassname).m_$(eltname) != 0);
.endforeach
   
.foreach E ${telmlist $T}
.set eltname ${capitalize $E}
.set elttype ${ttypename $T $E}
    m_$(eltname) = $(varclassname).m_$(eltname);
.endforeach
}

//
//
//  @MethodDesc
//
//      Constructor
//
.foreach E ${telmlist $T}
.set eltname $E
.set elttype ${ttypename $T $E}
//  @MethodParm.$(eltname)
//
//      <???>
//
.endforeach
//
//  @MethodNotes
//
//      <???>
//
//
//


$(classname)::$(classname)(
.foreach E ${telmlist $T}
.set eltname $E
.set elttype ${ttypename $T $E}
.. If the type is an enum, add a class scope prefix.
.if ${member ${tolower $(elttype)} ${ctypelist} }
.set elttype $(classname)::$(elttype)
.endif
.. If the type is a string, set it to a reference to a string
.if ${call PassAsRef $(elttype) }
.if ${call IsLastTermInList $E "${telmlist $T}" }
         const ${call NormalizeForMSVC $(elttype)}& $(eltname)
.else
         const ${call NormalizeForMSVC $(elttype)}& $(eltname),
.endif
.else
.if ${call IsLastTermInList $E "${telmlist $T}" }
         ${call NormalizeForMSVC $(elttype)} $(eltname)
.else
         ${call NormalizeForMSVC $(elttype)} $(eltname),
.endif
.endif
.endforeach
        )
{
.foreach E ${telmlist $T}
.set eltname $E
.set elttype ${ttypename $T $E}
    SWIFT_VERIFY($(eltname) != 0);
.endforeach
.foreach E ${telmlist $T}
.set eltname $E
.set membername m_${capitalize $E}
.set elttype ${ttypename $T $E}
    $(membername) = $(eltname);
.endforeach
}

//
//
//  @MethodDesc
//
//      Destructor
//
//  @MethodNotes
//
//      <???>
//

$(classname)::~$(classname)()
{
}

/*
    ===============================================================================

                                    Initialization

    ===============================================================================

*/

//
//
//  @MethodDesc
//
//      Sets the class to the default state.
//
//  @MethodNotes
//
//      <???>
//

void $(classname)::SetDefaults(void)
{
.foreach E ${telmlist $T}
.set membername m_${capitalize $E}
.set elttype ${ttypename $T $E}
.if ${eq $(elttype) string}
    $(membername) = "";
.else
    $(membername) = 0;
.endif
.endforeach
}


/*
    ===============================================================================

                                    Accessors

    ===============================================================================

*/

.foreach E ${telmlist $T}
.set eltname ${capitalize $E}
.set membername m_${capitalize $E}
.set elttype ${ttypename $T $E}
.. If the type is an enum, add a class scope prefix.
.if ${member ${tolower $(elttype)} ${ctypelist} }
.set elttype $(classname)::$(elttype)
.endif

//
//
//  @MethodDesc
//
//      Gets $(eltname)
//
//
//  @MethodReturn
//
//      $(eltname) 
//
//  @MethodNotes
//
//      <???>
//

.if ${call PassAsRef $(elttype) }
const ${call NormalizeForMSVC $(elttype)}& $(classname)::Get$(eltname)(void) const
.else
const ${call NormalizeForMSVC $(elttype)} $(classname)::Get$(eltname)(void) const
.endif
{
    return($(membername));
}

.endforeach

/*
    ===============================================================================

                                    Mutators

    ===============================================================================

*/

.foreach E ${telmlist $T}
.set eltname ${capitalize $E}
.set vareltname $E
.set membername m_${capitalize $E}
.set elttype ${ttypename $T $E}
.. If the type is an enum, add a class scope prefix.
.if ${member ${tolower $(elttype)} ${ctypelist} }
.set elttype $(classname)::$(elttype)
.endif

//
//
//  @MethodDesc
//
//      Sets $(eltname) 
//
//
//  @MethodParm.$(vareltname) 
//
//      The vaue to be assigned to the attribute $(eltname)
//
//  @MethodNotes
//
//      <???>
//

.if ${call PassAsRef $(elttype)}
HRESULT $(classname)::Set$(eltname)(const ${call NormalizeForMSVC $(elttype)}& $(vareltname))
.else
HRESULT $(classname)::Set$(eltname)(const ${call NormalizeForMSVC $(elttype)} $(vareltname))
.endif
{
    SWIFT_VERIFY($(vareltname) != 0);

    // Defensive response to incorrect parameter contents

    if ($(vareltname) == 0 )
    {
        return(ERROR_INVALID_PARAMETER);
    }

    // Assign the data to the member

	$(membername) = $(vareltname);

    return(NO_ERROR);
}

.endforeach

/*
    ===============================================================================

                                    Logic Operators

    ===============================================================================

*/

//
//
//  @MethodDesc
//
//      Compares two $(classname) objects
//
//
//  @MethodParm.$(varclassname)
//
//      Object to be compared to this one.
//
//  @MethodReturn
//
//        -1 if *this falls into sequence before a$(classname)
//         0 if the two objects are equal.
//        +1 if *this falls into sequence after a$(classname)
//
//  @MethodNotes
//
#pragma message("JSJM: $(fileroot).cpp : document the comparison collation sequence")
//
//
//
   
INT  $(classname)::CompareTo(const $(classname)& $(varclassname)) const
{
    #pragma message(__FILE__ "(1) :" "CRevision::CompareTo needs to verified/validated")

.foreach E ${telmlist $T}
.set eltname ${capitalize $E}
.set elttype ${ttypename $T $E}
    if ( m_$(eltname) > $(varclassname).m_$(eltname) )
    {
        return(1);
    }
    else if (m_$(eltname) < $(varclassname).m_$(eltname) )
    {
        return(-1);
    }

.endforeach
    return(0);
}

//
//
//  @MethodDesc
//
//      Checks two $(classname) objects for equality
//
//
//  @MethodParm.$(varclassname)
//
//      Object to be compared to this one.
//
//  @MethodReturn
//
//      true if the two object are equal.
//
    
bool  $(classname)::operator ==(const $(classname)& $(varclassname)) const
{
    return(CompareTo($(varclassname)) == 0);
}

//
//
//  @MethodDesc
//
//      Checks two $(classname) objects for inequality
//
//
//  @MethodParm.$(varclassname)
//
//      Object to be compared to this one.
//
//  @MethodReturn
//
//      true if the two object are un-equal.
//
    
bool  $(classname)::operator !=(const $(classname)& $(varclassname)) const
{
    return(CompareTo($(varclassname)) != 0);
}

//
//
//  @MethodDesc
//
//      Checks two $(classname) objects for the less than relationship
//
//
//  @MethodParm.$(varclassname)
//
//      Object to be compared to this one.
//
//  @MethodReturn
//
//      true if the the left hand object is less than the right.
//

bool  $(classname)::operator <(const $(classname)& $(varclassname)) const
{
    return(CompareTo($(varclassname)) == -1);
}

//
//
//  @MethodDesc
//
//      Checks two $(classname) objects for the greater than relationship
//
//
//  @MethodParm.$(varclassname)
//
//      Object to be compared to this one.
//
//  @MethodReturn
//
//      true if the the left hand object is greater than the right.
//

bool  $(classname)::operator >(const $(classname)& $(varclassname)) const
{
    return(CompareTo($(varclassname)) == +1);
}

/*
    ===============================================================================

                                    Validation

    ===============================================================================

*/

//
//
//  @MethodDesc
//
//      Verifies that the class is in valid state
//
//  @MethodReturn
//
//      Returns NO_ERROR if the $(classname) object is valid
//      Returns ERROR_INVALID_DATA if the $(classname) data members are invalid
//
//  @MethodNotes
//
//      <???>
//

HRESULT $(classname)::Validate(void)
{
.foreach E ${telmlist $T}
.set membername m_${capitalize $E}
.set elttype ${ttypename $T $E}
.if ${call IsStandardType $(elttype)}
    SWIFT_VERIFY( ($(membername) < <???>) || ($(membername) < <???>) );
.else
    SWIFT_VERIFY(($(membername).Validate != NO_ERROR));
.endif
.endforeach

.foreach E ${telmlist $T}
.set membername m_${capitalize $E}
.set elttype ${ttypename $T $E}
.if ${call IsStandardType $(elttype)}
    if ( ($(membername) < <???>) || ($(membername) < <???>) )
    {
        return(ERROR_INVALID_DATA);
    }
.else
    if ( ($(membername).Validate != NO_ERROR) )
    {
        return(ERROR_INVALID_DATA);
    }
.endif
.endforeach

    return(NO_ERROR);
}


/*
    ===============================================================================

                                    Assignment

    ===============================================================================

*/

//
//
//  @MethodDesc
//
//      Assignment Operator
//
//
//  @MethodParm.$(varclassname)
//
//      Object to be assigned to this one.
//
//  @MethodReturn
//
//      A reference to this object.
//
//  @MethodNotes
//
//      <???>
//
//
//

$(classname)& $(classname)::operator =(const $(classname)& $(varclassname))
{
    if ( this == &$(varclassname) )
    {
        return(*this);
    }

.foreach E ${telmlist $T}
.set membername m_${capitalize $E}
.set elttype ${ttypename $T $E}
    $(membername) = $(varclassname).$(membername);
.endforeach

    return(*this);
}

//============================================================================
//
//  Revision Log:
//
//      $$Log: BasicClass.Amat.ct,v $
//      $Revision 1.3  1998/07/25 03:48:56  jmochel
//      $Testing ClassProxy initialization, not yet working
//      $$
//      $$Revision 1.2  1998/07/21 11:09:19  jmochel $$
//      $$Most of the Gauntlet compiles now  $$
//      
//      
//============================================================================
.endredirect
.endmacro
..
..
..
.foreach Class ${classlist}
.set classname C$(Class)
.set fileroot $(Class)
Status : Generating $(classname).hpp
${call GenClassDef $(fileroot) $(classname) $(Class) }
Status : Generating $(fileroot).cpp : $(classname) implementation
${call GenClassImp $(fileroot) $(classname) $(Class)}
Status : Generating $(fileroot)UnitTest.cpp : $(classname) Unit Test implementation
${call GenUnitTest $(fileroot) $(classname) $(Class)}
Status : Generating $(fileroot)UnitTestMain.cpp : $(classname) Unit Test Main
${call GenUnitTestMain $(fileroot) $(classname) $(Class)}
.endforeach
E 2
I 1
E 1
