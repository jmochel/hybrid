..  Contains Declaration of Basic Unit Test code for Amat Classes
..
..  Author Jim Jackl-Mochel
..  Date 05.18.98
..
..  Copyright - This code is in the public domain
..
..  Revision Information 
..  ==================== 
..  $Author: jmochel $
..  $Revision: 1.3 $
..  $Date: 1998/07/25 03:48:57 $
..
..  ===================================================
..
..  Desc 
..      Generates Unit Test class for a basic java class
..
..  Parameters
..
..
..  Notes
..
..
..  ===================================================
.macro GenUnitTest fileroot classname T
.redirect $(fileroot)UnitTest.cpp
// @doc
//============================================================================
//
//    Copyright Applied Materials Inc., 
//    Unpublished work, create 1998.
//    All use, disclosure, and/or reproduction of this material is
//    prohibited unless authorized in writing.
//    All Rights Reserved.
//
//    Rights in this program belong to:
//
//        Applied Materials Inc.
//        Foundry Lane
//        Horsham, West Sussex, RH13 5PY
//
//
//============================================================================
//
//  File Name:  $(fileroot)UnitTest.cpp
//
//  Description:
//
//      A standalone routine for executing UnitTests on $(classname).
//      It is not a main program, that is found in $(fileroot)UnitTestMain.cpp
//
//============================================================================
//
//      $$Archive:$$
//      $$Author: jmochel $$
//      $$Date: 1998/07/25 03:48:57 $$
//      $$Revision: 1.3 $$
//


#pragma message("JSJM: Code Guideline: Check API Naming")
#pragma message("JSJM: Code Guideline: Check API Types")
#pragma message("JSJM: Code Guideline: Check API Returns")
#pragma message("JSJM: Code Guideline: Check API Exceptions")
#pragma message("JSJM: Code Guideline: Check API Exception Specifications")
#pragma message("JSJM: Code Guideline: Check Comments")

#pragma message("JSJM: Code Guideline: Use new cast operators - dynamic_cast etc... ")
#pragma message("JSJM: Code Guideline: Test array indices before using them to ensure no off-by-ones")
#pragma message("JSJM: Code Guideline: Use const on parameters not modified by a method")
#pragma message("JSJM: Code Guideline: Avoid friend functions or document why !")
#pragma message("JSJM: Code Guideline: All switch statements => default clause")
#pragma message("JSJM: Code Guideline: Avoid abbreviations")
#pragma message("JSJM: Code Guideline: Used mixed case for identifeirs")
#pragma message("JSJM: Code Guideline: Do not use exceptions as a normal means of reporting errors")

#pragma message("JSJM: Code Guideline: Hung Notation - p=>Ptr, h=>Handle, r=>Reference, vVariant")

.. Include headers

#include <climits>

#include "$(fileroot).h"

.. Now the unit test

/*
    @ProcDesc

        Unit test of $(fileroot)

    @ProcNotes

        <???>
*/

HRESULT $(classname)UnitTest(int argCnt, char* argValues[])
{
    // Test basic allocation and stuff

    $(classname)*   aDynamic$(classname);

    try
    {
        $(classname)    aStack$(classname);
    
        // Test the dynamic allocation 
    
        aDynamic$(classname) = new $(classname)();

        delete(aDynamic$(classname));
    }
    catch (...)
    {
        // Clean up to known state

        delete(aDynamic$(classname));

        throw();
    }

    // Test all accessors and mutators

    try
    {
        HRESULT         hres = NO_ERROR;
        const           size_t testValueCnt = 4;

        $(classname)    a$(classname);

.foreach E ${telmlist $T}
.set eltname $E
.set elttype ${ttypename $T $E}

        // Test Get/Set$(eltname) Accessor/Mutator

        $(elttype) $(eltname)TestValues[testValueCnt];
        $(elttype) $(eltname)TestValue;

.if ${call IsStandardType $(elttype)}
.if ${eq $(elttype) "INT"}
        $(eltname)TestValues[0] = INT_MIN;             // Low value
        $(eltname)TestValues[1] = INT_MAX/2;           // Medium value
        $(eltname)TestValues[2] = INT_MAX;             // High Value
        $(eltname)TestValues[3] = INT_MAX * 2;         // Ridiculous Value
.endif

.if ${eq $(elttype) "SINT"}
        $(eltname)TestValues[0] = INT_MIN;             // Low value
        $(eltname)TestValues[1] = INT_MAX/2;           // Medium value
        $(eltname)TestValues[2] = INT_MAX;             // High Value
        $(eltname)TestValues[3] = INT_MAX * 2;         // Ridiculous Value
.endif
.if ${eq $(elttype) "UINT"}
        $(eltname)TestValues[0] = UINT_MIN;             // Low value
        $(eltname)TestValues[1] = UINT_MAX/2;           // Medium value
        $(eltname)TestValues[2] = UINT_MAX;             // High Value
        $(eltname)TestValues[3] = UINT_MAX * 2;         // Ridiculous Value
.endif
.if ${eq $(elttype) "SHORT"}
        $(eltname)TestValues[0] = SHRT_MIN;             // Low value
        $(eltname)TestValues[1] = SHRT_MAX/2;           // Medium value
        $(eltname)TestValues[2] = SHRT_MAX;             // High Value
        $(eltname)TestValues[3] = SHRT_MAX * 2;         // Ridiculous Value
.endif
.if ${eq $(elttype) "SSHORT"}
        $(eltname)TestValues[0] = SHRT_MIN;             // Low value
        $(eltname)TestValues[1] = SHRT_MAX/2;           // Medium value
        $(eltname)TestValues[2] = SHRT_MAX;             // High Value
        $(eltname)TestValues[3] = SHRT_MAX * 2;         // Ridiculous Value
.endif
.if ${eq $(elttype) "USHORT"}
        $(eltname)TestValues[0] = USHRT_MIN;             // Low value
        $(eltname)TestValues[1] = USHRT_MAX/2;           // Medium value
        $(eltname)TestValues[2] = USHRT_MAX;             // High Value
        $(eltname)TestValues[3] = USHRT_MAX * 2;         // Ridiculous Value
.endif
.if ${eq $(elttype) "LONG"}
        $(eltname)TestValues[0] = LONG_MIN;             // Low value
        $(eltname)TestValues[1] = LONG_MAX/2;           // Medium value
        $(eltname)TestValues[2] = LONG_MAX;             // High Value
        $(eltname)TestValues[3] = LONG_MAX * 2;         // Ridiculous Value
.endif
.if ${eq $(elttype) "SLONG"}
        $(eltname)TestValues[0] = LONG_MIN;             // Low value
        $(eltname)TestValues[1] = LONG_MAX/2;           // Medium value
        $(eltname)TestValues[2] = LONG_MAX;             // High Value
        $(eltname)TestValues[3] = LONG_MAX * 2;         // Ridiculous Value
.endif
.if ${eq $(elttype) "ULONG"}
        $(eltname)TestValues[0] = ULONG_MIN;             // Low value
        $(eltname)TestValues[1] = ULONG_MAX/2;           // Medium value
        $(eltname)TestValues[2] = ULONG_MAX;             // High Value
        $(eltname)TestValues[3] = ULONG_MAX * 2;         // Ridiculous Value
.endif
.if ${eq $(elttype) "string"}
        $(eltname)TestValues[0] = "low";              // Low value
        $(eltname)TestValues[1] = "medium";           // Medium value
        $(eltname)TestValues[2] = "high-high-high";   // High Value
        $(eltname)TestValues[3] = "------------------------------------------------";      // Ridiculous Value
.endif

.else
        $(eltname)TestValues[0] = <???>;        // Low value
        $(eltname)TestValues[1] = <???>;        // Medium value
        $(eltname)TestValues[2] = <???>;        // High Value
        $(eltname)TestValues[3] = <???>;        // Ridiculous Value
.endif
        for ( size_t i = 0; i < testValueCnt; i++ )
        {
            hres = aStack$(classname).Set$(eltname)($(eltname)TestValues[i]);

            if ( FAILURE(hres) )
            {
                cout << "$(classname)UnitTest: Failure in Set$(eltname): parameter value was " << $(eltname)TestValues[i] <<  "," << "hresult was " << hres << endl();
            }

            $(eltname)TestValue = aStack$(classname).Get$(eltname)();
            
            if ( $(eltname)TestValue !=  $(eltname)TestValues[i] )
            {
                cout << "$(classname)UnitTest: mismatched results from Get/Set pair. Expected  " << $(eltname)TestValues[i] <<  "," << ", got " << $(eltname)TestValue << endl();
            }
        }
.endforeach

    }
    catch (...)
    {
        throw();
    }


    return(NO_ERROR);
}

//============================================================================
//
//  Revision Log:
//
//      $$Log: BasicUnitTest.Amat.ct,v $
//      $Revision 1.3  1998/07/25 03:48:57  jmochel
//      $Testing ClassProxy initialization, not yet working
//      $$
//      $$Revision 1.2  1998/07/21 11:09:20  jmochel $$
//      $$Most of the Gauntlet compiles now   $$
//      
//      
//============================================================================
.endredirect
.endmacro
..  ===================================================
..
..  Desc 
..      Generates Unit Test Main for a basic Amat class
..
..  Parameters
..
..
..  Notes
..
..
..  ===================================================
.macro GenUnitTestMain fileroot classname T
.redirect $(fileroot)UnitTestMain.cpp
// @doc
//============================================================================
//
//    Copyright Applied Materials Inc., 
//    Unpublished work, create 1998.
//    All use, disclosure, and/or reproduction of this material is
//    prohibited unless authorized in writing.
//    All Rights Reserved.
//
//    Rights in this program belong to:
//
//        Applied Materials Inc.
//        Foundry Lane
//        Horsham, West Sussex, RH13 5PY
//
//
//============================================================================
//
//  File Name:  $(fileroot)UnitTestMain.cpp
//
//  Description:
//
//      <???>
//
//============================================================================
//
//      $$Archive:$$
//      $$Author: jmochel $$
//      $$Date: 1998/07/25 03:48:57 $$
//      $$Revision: 1.3 $$
//


#pragma message("JSJM: Code Guideline: Check API Naming")
#pragma message("JSJM: Code Guideline: Check API Types")
#pragma message("JSJM: Code Guideline: Check API Returns")
#pragma message("JSJM: Code Guideline: Check API Exceptions")
#pragma message("JSJM: Code Guideline: Check API Exception Specifications")
#pragma message("JSJM: Code Guideline: Check Comments")

#pragma message("JSJM: Code Guideline: Use new cast operators - dynamic_cast etc... ")
#pragma message("JSJM: Code Guideline: Test array indices before using them to ensure no off-by-ones")
#pragma message("JSJM: Code Guideline: Use const on parameters not modified by a method")
#pragma message("JSJM: Code Guideline: Avoid friend functions or document why !")
#pragma message("JSJM: Code Guideline: All switch statements => default clause")
#pragma message("JSJM: Code Guideline: Avoid abbreviations")
#pragma message("JSJM: Code Guideline: Used mixed case for identifeirs")
#pragma message("JSJM: Code Guideline: Do not use exceptions as a normal means of reporting errors")

#pragma message("JSJM: Code Guideline: Hung Notation - p=>Ptr, h=>Handle, r=>Reference, vVariant")

#include <cstdlib>  // For EXIT status codes.

#include "$(fileroot).h"

// Extern reference to the actual unit test code.

extern HRESULT $(classname)UnitTest(int argCnt, char* argValues[]);

// Unit Test 

Reporter GlobalReporter(AppInfo(string("${tolower $(fileroot)}unittest"),string("1.00.00")));

/*
    @ProcDesc

        Main for unit test of $(fileroot)

    @ProcNotes

        <???>
*/

int main(int argCnt, char* argValues[])
{
    HRESULT hres;

    hres = $(classname)UnitTest(argCnt,argValues);

    if ( hres != NO_ERROR )
    {
        return(EXIT_FAILURE);
    }

    return(EXIT_SUCCESS);
}

//============================================================================
//
//  Revision Log:
//
//      $$Log: BasicUnitTest.Amat.ct,v $
//      $Revision 1.3  1998/07/25 03:48:57  jmochel
//      $Testing ClassProxy initialization, not yet working
//      $$
//      $$Revision 1.2  1998/07/21 11:09:20  jmochel $$ 
//      $$ Most of the Gauntlet compiles now $$
//      
//      
//============================================================================
.endredirect
.endmacro
..
..  EOF
..
..
