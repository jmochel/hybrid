
                          Release Notes
                    for HPjmeter Version 1.1.1

These release notes contain the following topics:

- Features
- Supported Java(TM) Product Versions
- System Requirements
- Installation Instructions
- Documentation and Help
- FAQs



Features
--------

HPjmeter is a platform-independent tool that helps detect performance
bottlenecks by graphically displaying profiling data.  HPjmeter extracts
metrics from collected data which you can view in the following ways:

-	Cumulative (inclusive and exclusive) execution times and call
	counts for all methods in a profiled application.

-	Call graphs viewed as a tree and interactively traversed
	by expanding or collapsing selected branches.	
	
-	Memory-related metrics.



Supported Java Product Versions
--------------------------------

The following versions of the Java product produce profile data files from
which HPjmeter can display data, based upon the profiling option(s)
used to collect data:

	JDK and JRE for Java release 1.1.6 or 1.1.7 for HP-UX 10.20 and
		HP-UX 11.0 (data collected using the -prof option)
	JDK and JRE for Java release 1.1.8 for HP-UX 10.20 and
		HP-UX 11.0 (data collected using the -prof and -eprof options)
	SDK and RTE for Java release 1.2.1 for HP-UX 11.0, Classic VM
		(data collected using the -Xrunhprof option)
	SDK and RTE for Java release 1.2.2.05 or 1.3 for HP-UX 11.0, HotSpot VM
                (data collected using the -Xeprof option)
	Any Java 1.1 implementation (data collected using the -prof option)
	Any Java 1.2 implementation (data collected using the -Xrunhprof
		option compatible with the JavaSoft JDK-1.2.1-A implementation)
	Any Java 1.3 implementation (data collected using the -Xrunhprof
		option compatible with the JavaSoft JDK-1.3.0-C implementation)




System Requirements
-------------------
	
To run HPjmeter, make sure you meet the following system
requirements.

You need either:
	Java Virtual Machine 1.1.6 or later (the development
		environment is not necessary)
	and
	Swing 1.1 package, which you can obtain separately
	   from the Java Foundations Classes site (Sun Microsystems, Inc.)

Or:     Any Java 2 Virtual Machine, which includes the Swing 1.1
            package.


Installation Instructions
-------------------------

HPjmeter is available either as a compressed TAR file, or as a
ZIP file. Both contain the same contents, including the
HPjmeter .jar file (the pre-compiled program).

Download the HPjmeter compressed TAR file, HPjmeter-1.1.1.tar.gz
or
Download the HPjmeter ZIP file, HPjmeter-1.1.1.zip

1.  Save the downloaded binary file (either
    HPjmeter-1.1.1.tar.gz or HPjmeter-1.1.1.zip).

2.  Depending on the file you downloaded, either
    gunzip and untar, or unzip the file to extract
    the contents to a directory of your choice.


Running HPjmeter Using Java 1.1.x
---------------------------------

HPjmeter uses Swing 1.1, so be sure to include the appropriate
Swing jar files in the CLASSPATH. Examples are shown below.
You can obtain Swing 1.1 from the Java Foundation Classes site:
http://java.sun.com/products/jfc/download.html

Here is an example in csh:

   setenv DISPLAY <your display>:0.0
   setenv SWINGLOC <directory in which swingall.jar installed>
   setenv HPJMETERLOC <directory in which HPjmeter.jar installed>
   setenv CLASSPATH $HPJMETERLOC/HPjmeter.jar:$SWINGLOC/swingall.jar
   java -mx64m HPjmeter

Here is an example in ksh:

   export DISPLAY=<your display>:0.0
   SWINGLOC=<directory in which swingall.jar installed>
   HPJMETERLOC=<directory in which HPjmeter.jar installed>
   export CLASSPATH=$HPJMETERLOC/HPjmeter.jar:$SWINGLOC/swingall.jar
   java -mx64m HPjmeter

	
Running HPjmeter using Java 2
-----------------------------

The Swing package is a standard extension for Java 2, so you do not
need to install it, or specify it on your path.

Here is an example in csh:

   setenv DISPLAY <your display>:0.0
   setenv HPJMETERLOC <directory in which HPjmeter.jar installed>
   java -mx64m -jar $HPJMETERLOC/HPjmeter.jar

Here is an example in ksh:

   export DISPLAY=<your display>:0.0
   HPJMETERLOC=<directory in which HPjmeter.jar installed>
   java -mx64m -jar $HPJMETERLOC/HPjmeter.jar



Documentation and Help
----------------------

The following information is available to assist you:

-  HPjmeter Online Help -- includes a detailed description of the metrics and
	profiling options available for different versions of Java.

-  Release Notes for HPjmeter Version 1.1.1 -- what you are reading now.

-  The HPjmeter Tour -- a web site with detailed instructions on how to use
   the many features of HPjmeter (available October 2000) at:
   http://www.hp.com/java

-  The HP-UX Java Performance Tuning web pages at:
   http://devresource.hp.com/JavaATC/JavaPerfTune/index.html


HPjmeter requires no special compilation or preparation of the Java code --
just specify a profiling option when running your application.
Available profiling options depend on the version of the Java virtual
machine you are using.  They are documented in the HPjmeter online help system,
and in the section "Supported Java Product Versions"  in these release
notes.

Running your application with profiling enabled causes the virtual machine
to dump profile data collected during the execution to a file. Since
HPjmeter post-processes profile data, you can begin analyzing after
the application completes.

The information below describes how to use HPjmeter to
profile your applications.


- Reading Data Files
- Understanding Metrics
- Understanding Call Graphs
- Analyzing Threads Performance
- Analyzing Problems
- Guessing Lock Contention
- Locating Object Allocation


Reading Data Files
------------------

Once the HPjmeter welcome screen displays, you can read in the profile data
file that your application generated, by selecting File > Open
and selecting the file.

The HPjmeter file selection dialog box allows you to select
a specific file type or display all data files. HPjmeter automatically
recognizes the format of the file you select.

HPjmeter currently supports the following file formats:

- Those produced by the standard Java virtual machines, versions 1.1,
  and by the 'hprof' profiler included in Java 2 implementations
- A proprietary format for extended profiling, available with HP-UX
  Java version 1.1.8, and HP-UX SDK for the Java 2 platform, Hotspot VM
  version 1.2.2.05 or later, or 1.3

After the data file is read in, you can display statistical information
about the application by selecting the appropriate menu items.


Understanding Metrics
---------------------

All profile data is presented using metrics. Each metric is
described in the Online Help.

One of the metrics is the method call count, which is the
number of times each of the methods was called throughout the
runtime of the application.  This metric is sorted by decreasing
order of the call count. The most frequently called methods
are displayed at the top of the screen.

You can customize the format in which the method names are
output. The package names for the class and the argument
types for methods can be independently turned on and off.

Another metric displays the amount of time spent in each method.
This is the accumulated time over all invocations. The methods
consuming the most time are displayed at the top of the screen.

To analyze the application, you may want to look at more than one metric
at the same time.  HPjmeter allows you to open multiple windows
showing different metrics for the same profile data file or for
different files. To open a new window, select File > New Window.


Understanding Call Graphs
-------------------------

Metrics alone do not provide an overall view of an application's control
flow. HPjmeter also displays call graph information.
To view call graph information, select Metric > Call Graph Tree.

Call graphs are represented as a tree. You can interactively expand and
collapse the tree "branches" (nodes) by clicking the circle beside
the nodes.

Drilling down into branch data displays called methods beneath
the caller. Each indented line describes one called method.
The called methods are sorted by decreasing time, with the most
interesting methods displayed at the top.

By repeatedly expanding the nodes with the large times and expanding
deeper into the tree, you can determine where the most time-consuming
program tasks occurred.

Another useful feature is the method search capability under the
Edit menu, which allows you to search by package name, class name,
and method name. Upon searching, the call graph tree is automatically
expanded, displaying the methods found. Double-clicking a method
name shows you other callers of a method.


Analyzing Threads Performance
-----------------------------

When the profile data contains the appropriate information, HPjmeter
is able to present the threads created during the application runtime.
To view the threads, select Metric > Threads Histogram.
The histogram displays the lifespan of each individual thread. It is also
possible to see the metrics for each thread separately, by
selecting Thread from the Scope menu.

This is especially useful if you want to focus on the best
performance of selected threads responsible for the activities
essential for your application.


Analyzing Memory Problems
-------------------------

Poor application performance can be also caused by inefficient use of memory.
HPjmeter provides metrics that help you understand memory usage. One way
the tool does this is by analyzing the number of objects allocated during
application execution. If the profile data does not contain direct allocation
counts, this metric is estimated based on the number of invocations of the
classes' constructors. To view the number of objects, select Metric >
Created Objects.


Locating Object Allocations
----------------------------

In addition to knowing the number of allocated objects, you can locate where
in the program these objects were created. Analysis of these metrics may
be helpful in detecting "memory leaks", which in the case of
Java technology means objects still unintentionally referenced.

To locate where the objects were created, select Metric > Created
Objects (Count). Double clicking on class names lists all of the methods
that allocated objects of the given class, sorted by the number of objects
allocated.

Other memory-related metrics show what was left in memory when the
application completed execution. (Select Metric > Residual Objects.)
These include arrays of objects, arrays of scalar types, and arrays
of arrays.


Guessing Lock Contention
------------------------

HPjmeter has the ability to suggest potential performance bottlenecks.
In Java technology, one such bottleneck is high lock contention,
a synchronization problem in which threads spend much time waiting to
acquire the locks for synchronized methods or statements. Even without
the lock-specific profile data, HPjmeter is sometimes able to tell which
methods might have suffered from the lock contention problem, using method
clock times and the call graph. To view lock contention data, select
Guess > Lock Contention.

HPjmeter is usually able to pinpoint high lock contention in cases where
the execution of a particular method seems to take longer than expected.
However, since HPjmeter does this in a speculative manner, the tool
only offers hints for a possible cause.


FAQs
----

Q:  Does HPjmeter require HP-UX Java(tm) technology to run, or will it
work on other platforms as well?

A:  HPjmeter is written entirely in Java(tm), so it should run on any
platform that supports Java 1.1, or Java 2.  However, if you are
using Java 1.1, you will need the Swing 1.1 package, available from
the Java Foundation Classes site
(http://java.sun.com/products/jfc/download.html).


Q:  Can  HPjmeter be used to analyze profiling data obtained on
another platform?

A:  Probably, if you used Java 1.1 to obtain the profile data.
For Java 2, currently the only versions of hprof supported are the
ones enclosed with HP-UX SDK for the Java 2 platform, Classic
Virtual Machine, and JavaSoft's JDK-1.2.1-A or JDK-1.3.0-C  for
Solaris(tm) or Windows(tm) NT, or compatible.


Q:  I specified a profiling option for the Java VM, but received no
profile data file, or the file is incomplete. What's wrong?

A:  Most probably you tried to read the data file before the application
completed. Also, remember that the VM must terminate naturally,
either by exiting all threads, or by a call to System.exit().
Sometimes it will be necessary to modify the application code slightly
to achieve this. Killing the VM process does not produce profile data.


Q:  Why is HPjmeter so slow? I cannot scroll smoothly.

A:  Many Java 1.2 implementations have performance problems with remote
displays, especially with Swing applications, such as HPjmeter.
If at all possible, try to run HPjmeter locally on your workstation.
If you must run it remotely, you may improve performance by running
it using Java 1.1, or HP-UX Java 1.3 with FastSwing option.


Q:  One of the entries in the profile data is labeled <unknown
caller>.  What is that?

A:  The profiling information is collected by the Java virtual
machine at the entry and exit points of each method.  When the
virtual machine cannot identify the calling method, it assigns it
the name <unknown caller>.  Therefore more than one method can be
represented by the <unknown caller> name.  Usually the reason for
not being able to recognize the caller is that it was not a Java method.
For all practical purposes, you can assume that the <unknown caller>
entry represents the virtual machine itself.

Q: What is the unit of the timing data displayed by HPjmeter?

A: For sampling, hprof uses varying sampling interval to keep the
overhead at a reasonable level.  While profiling by tracing, the
Java virtual machine measures the time in milliseconds.  However,
the profiling intrusion can be very large.  In the HotSpot VM
intrusion for SPECjvm98 (http://www.spec.org/) can be as low as 3x.
In extreme cases, however, profiling an application can result in
a 10 times or greater slow-down.  In effect, the real meaning of time
is often lost.  It is best to view the timing values as if they were
measured in some abstract and platform-independent time units.

Q:  Is it possible to see the performance data for a specific
thread only?

A:  Yes, if you use the -Xeprof option for the HotSpot JVM,
the thread=y option for Java 2 hprof, or the -eprof option
for Java 1.1.

Q:  Is it possible to see the performance data for a specific time
slice only?

A:  No, but if you'd like to use a large time slice, you can try
the following trick.  Profile your application twice. Run it the first
time only up to the beginning of the intended time slice.
Run it the second time up to the end of the slice.  You will get
2 data files that you can compare using HPjmeter.  Assuming that
both runs were performed in very similar environments, this could
give you estimated metrics for your time slice.


Q:  I'm looking at an Inclusive Method Time metric, and the reported
time for one or more of the methods is very large -- even larger than
the total running time of the application.  What's wrong?

A:  Possibly nothing is wrong.  Such timing values can be reported for
recursive functions.  Each invocation of the function "collects"
its own time.  So depending on the depth of recursion, the total
may be even greater than the application running time.  Another
reason for this apparent anomaly can be caused by multiple threads
spending time within the function.


Q:  I'm trying to expand one of the Call Graph Tree nodes, but I
cannot see any children.

A:  It may happen that all outcoming branches from this node have
timing values that are less than the current cut-off value.  In such
cases no children will be displayed.


Q:  How can I use the slider for the Call Graph Tree pruning for
precise adjustments?

A:  You can do two things. One is you can click on a side of the slider
knob, which adjusts the cut-off value by 1.  The other is you can
enlarge the whole tree pruning dialog window to fill the width of
the screen.  It is best to adjust the cut-off value when the
tree is still small.

Q:  I can see multiple entries at the top level of the Call Graph
Tree.  Why is that?

A:  For the Process scope, each thread is likely to generate one
entry which was seen calling others, but not being called itself.
Such methods are placed at the top level.  Another reason for
multiple roots of the call graph is that the profiling agent never
saw what called these methods.  This happens, for example, when
using the java.lang.reflect package.

Q:  Guess - Lock Contention reported a method which is not even
synchronized or uses the synchronized statement.  Why is that?

A:  It can happen.  HPjmeter does not have the information about
the monitor locks, so it only guesses which methods' execution
got delayed, using the timing data.

Q:  After reading the profile data, HPjmeter displays a running
time of the application which is completely wrong.  Is this a bug?

A:  If you used -prof to collect the profile data, HPjmeter can
only guess the running time.  In most cases, it does a good job
at estimating.  However in some extreme cases, the estimate can be
even an order of magnitude wrong.

Q:  I have a suggestion for the improvement of HPjmeter.  How can I
report it?

A:  Please send email to java-tools-support@cup.hp.com.










***************************************************************************
                     Legal Notices

Copyright (c) Hewlett-Packard Company 1997-2000.  All Rights Reserved.
Reproduction, adaptation, or translation without prior written permission is
prohibited, except as allowed under the copyright laws.

UNIX is a registered trademark in the United States and other countries,
licensed exclusively through X/Open Company Limited.

WHILE THE INFORMATION IN THIS PUBLICATION IS BELIEVED TO BE ACCURATE,
HEWLETT-PACKARD MAKES NO WARRANTY OF ANY KIND WITH REGARD TO THIS MATERIAL,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS FOR A PARTICULAR PURPOSE.  Hewlett-Packard shall not be liable for
errors contained herein or for incidental or consequential damages in
connection with the furnishing, performance or use of this material.
Information in this publication is subject to change without notice.

Java and all Java-based trademarks and logos are trademarks or registered
trademarks of Sun Microsystems, Inc. in the U.S. and other countries.


